<?php
// $Id$
// $Name$
// for D6
/**
 * @file
 * Enables permitted roles to upload images for insertion into configured nodes.
 */

/**
 * Implementation of hook_help().
 */
function imagepicker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#imagepicker':
      $output = '<p>'. t('Adds an advanced image upload form under the node body part.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function imagepicker_perm() {
  return array('administer imagepicker', 'use imagepicker', 'access own imagepicker');
}

/**
 * Implementation of hook_menu().
 */
function imagepicker_menu() {
  $items = array();
  $items['imagepicker'] = array(
    'title' => 'Image picker',
    'page callback' => 'imagepicker_upload',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_CALLBACK,
    'file' => 'imagepicker.upload.inc',
  );
  $items['imagepicker/upload'] = array(
    'title' => 'Upload',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1
  );
  $items['imagepicker/browse'] = array(
    'title' => 'Browse',
    'page callback' => 'imagepicker_browse',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  $items['imagepicker/browse/%imagepicker_img_id'] = array(
    'title' => 'Browse',
    'page callback' => 'imagepicker_browse',
    'page arguments' => array(2),
    'access arguments' => array('use imagepicker'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );

  $items['imagepicker/edit/%imagepicker_img_id'] = array(
    'title' => 'Edit image',
    'page callback' => 'imagepicker_image_edit',
    'page arguments' => array(2),
    'access arguments' => array('use imagepicker'),
    'type' => MENU_CALLBACK,
    'file' => 'imagepicker.edit.inc',
  );
  $items['imagepicker/image/%imagepicker_img_id'] = array(
    'title' => 'Imagepicker',
    'page callback' => 'imagepicker_image_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // admin
  $items['admin/settings/imagepicker'] = array(
    'title'            => 'Imagepicker',
    'description'      => 'Imagepicker settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imagepicker_admin_settings'),
    'access arguments' => array('administer imagepicker'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'imagepicker.admin.inc',
  );
  // account
  if (variable_get('imagepicker_account_enabled', 1)) {
    $items['user/%imagepicker_uid/imagepicker'] = array(
      'title'            => 'My imagepicker',
      'description'      => t('Manage your imagepicker files.'),
      'page callback'    => 'imagepicker_user_page',
      'page arguments'   => array(1),
      'access arguments' => array('access own imagepicker'),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'imagepicker.upload.inc',
    );
    $items['user/%imagepicker_uid/imagepicker/%imagepicker_path'] = array(
      'title'            => t('My imagepicker'),
      'description'      => t('Manage your imagepicker files.'),
      'page callback'    => 'imagepicker_user_page',
      'page arguments'   => array(1, 3),
      'access arguments' => array('access own imagepicker'),
      'type'             => MENU_LOCAL_TASK,
    );
    $items['user/%imagepicker_uid/imagepicker/%imagepicker_path/%imagepicker_img_id'] = array(
      'title'            => t('My imagepicker'),
      'description'      => t('Manage your imagepicker files.'),
      'page callback'    => 'imagepicker_user_page',
      'page arguments'   => array(1, 3, 4),
      'access arguments' => array('access own imagepicker'),
      'type'             => MENU_LOCAL_TASK,
      'file'             => 'imagepicker.edit.inc',
    );
  }

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function imagepicker_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $node_types = node_get_types('names');
  $node_type = in_array($node->type, variable_get('imagepicker_node_types_enabled', $node_types), TRUE);
  // comment
  $comment = FALSE;
  $weight = 1;
  if (module_exists('comment') && variable_get('imagepicker_comment_enabled', 0) && preg_match('/comment_form$/i', $form_id) ) {
    $comment = TRUE;
    $weight = 1;
  }
  if (user_access('use imagepicker')) {
    if (($node_type && preg_match('/node_form$/i', $form_id) ) || $comment ) {
      $form['body_filter']['file_upload'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image picker'),
        '#collapsible' => 1,
        '#collapsed' => variable_get('imagepicker_advanced_collapsed', 0),
        '#weight' => $weight,
      );
      $form['body_filter']['file_upload']['mpframe'] = array(
        '#type' => 'markup',
        '#value' => '<div><iframe id="imagepicker" style="width: '. variable_get('imagepicker_advanced_iframe_width', "100%") .'; height: '. variable_get('imagepicker_advanced_iframe_height', 500) .'px; border: '. variable_get('imagepicker_advanced_iframe_border', "0") .';" src="'. url('imagepicker') .'">Imagepicker requires iframe support.</iframe></div>',
      );

    }
  }
}

/**
 * theme registry
 */
function imagepicker_theme() {
  return array(
    'imagepicker' => array(
      'arguments' => array(
        'content' => NULL),
    ),
  );
}

/**
 * Menu local task; presents the browse and select pages for imagepicker
 */
function imagepicker_browse($img_id=0) {

  if ( $img_id ) {
    imagepicker_image_select($img_id);
    exit();
  }

  $content = _imagepicker_browse();
  theme('imagepicker', $content);
}

function imagepicker_image_select($img_id) {
  global $user;

  $result = db_query_range("SELECT * FROM {imagepicker} WHERE uid = '%d' AND img_id = '%d'", $user->uid,$img_id, 0, 1);
  $img = db_fetch_array($result);
  if ( $img) {
    drupal_add_js(imagepicker_js($img), 'inline');
    $imgpath = imagepicker_get_image_path($img, 'browser');
    $content = '<div class="help">'. t('Choose the settings you want, place the cursor in the Body box above and Insert image.') .'</div>';
    if ($img['img_title']) {
      $content .= '<div id="imgp_img_holder_title">'. $img['img_title'] .'</div>';
    }
    if ($img['img_description']) {
      $content .= '<div id="imgp_img_holder_description">'. $img['img_description'] .'</div>';
    }
    $content .= '<div id="imgp_img_holder">';
    $content .= '<img id="imgp_img" src="'. $imgpath .'" alt="'. $img['img_title'] .'" title="'. $img['img_title'] .'" />';
    $content .= '</div>';
    $content .= drupal_get_form('imagepicker_image_form', $img['img_id']);
  }
  else {
    drupal_set_message(t('Image not found in select.'), 'error');
    $content = '';
  }

  theme('imagepicker', $content);
}

function imagepicker_image_form(&$form_state, $img_id) {
  $showoptions = array('full' => t('Full size'), 'thumb' => t('Thumbnail'), 'title' => t('Title'));
  $linkoptions = array('none' => t('None'), 'file' => t('File'), 'page' => t('Page') );
  if (module_exists('lightbox2') && variable_get('imagepicker_lightbox2_enable', 1) ) {
    $linkoptions['lightbox'] = t('Lightbox');
  }
  if (variable_get('imagepicker_default_align_show', 1)) {
    $alignoptions = array('none' => t('None'), 'fleft' => t('Float Left'), 'fright' => t('Float right'));
    $form['align'] = array(
      '#type' => 'radios',
      '#title' => t('Align'),
      '#default_value' => 'none',
      '#options' => $alignoptions,
      '#description' => '',
      '#prefix' => '<div class="imgp_img_options">',
      '#suffix' => '</div>'
    );
  }
  $form['show'] = array(
    '#type' => 'radios',
    '#id' => 'show',
    '#title' => t('Show'),
    '#default_value' => 'full',
    '#options' => $showoptions,
    '#description' => '',
    '#prefix' => '<div class="imgp_img_options">',
    '#suffix' => '</div>'
  );
  $form['link'] = array(
    '#type' => 'radios',
    '#title' => t('Link'),
    '#default_value' => 'none',
    '#options' => $linkoptions,
    '#description' => '',
    '#prefix' => '<div class="imgp_img_options">',
    '#suffix' => '</div>'
  );
  $form['insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert image'),
    '#prefix' => '<div id="imgp_controls">',
    '#attributes' => array('onclick' => 'imagepickerInsert(this); return false;')
  );
  $form['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit image'),
    '#submit' => array('imagepicker_image_form_edit'),
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete image'),
    '#submit' => array('imagepicker_image_form_delete'),
    '#suffix' => '</div>'
  );
  $form['img_id'] = array(
    '#type' => 'hidden',
    '#value' => $img_id,
  );

  return $form;
}

/**
 * Submit form functions
 */
function imagepicker_image_form_delete($form, &$form_state) {
  imagepicker_image_delete($form_state['values']['img_id']);
}
function imagepicker_image_form_edit($form, &$form_state) {
  drupal_goto('imagepicker/edit/'. $form_state['values']['img_id']);
}

function imagepicker_image_delete($img_id, $account=FALSE) {
  global $user;

  $result = db_query_range("SELECT uid, img_name FROM {imagepicker} WHERE img_id = '%d'", $img_id, 0, 1);
  $img = db_fetch_array($result);
  if ($img) {
    if ($img['uid'] != $user->uid) {
      drupal_set_message(t('This image does not belong to you.'), 'error');
      watchdog('imagepicker', 'User uid %d attempted to delete image belonging to user uid %d', array($user->uid, $img['uid']), WATCHDOG_WARNING);
    }
    else {
      $destination = imagepicker_get_path(FALSE, TRUE);
      $thumbsdir = $destination .'thumbs'. DIRECTORY_SEPARATOR;
      $browserdir = $destination .'browser'. DIRECTORY_SEPARATOR;
      file_delete($destination . $img['img_name']);
      file_delete($thumbsdir . $img['img_name']);
      file_delete($browserdir . $img['img_name']);
      if (db_query("DELETE FROM {imagepicker} WHERE uid = '%d' AND img_id = '%d'", array($user->uid, $img_id))) {
        drupal_set_message(t('Image was successfully deleted'));
      }
      else {
        drupal_set_message(t('Error while trying to delete your image from database.'));
      }
    }
  }
  else {
    drupal_set_message(t('Image not found in delete.'), 'error');
  }
  if ($account) {
    drupal_goto('user/'. $user->uid .'/imagepicker/browse');
  }
  else {
    drupal_goto('imagepicker/browse');
  }
}

/**
 * Menu callback; presents the image page for imagepicker
 */
function imagepicker_image_page($img_id) {
  global $base_url;

  $result = db_query_range("SELECT i.*, u.name FROM {imagepicker} AS i JOIN {users} AS u USING (uid) WHERE img_id = '%d'", $img_id, 0, 1);
  $img = db_fetch_array($result);
  if ($img && is_array($img) && count($img)) {
    $path = drupal_get_path('module', 'imagepicker');
    drupal_add_css($path .'/imagepicker.css');
    drupal_set_title($img['img_title']);
    $imgsrc = imagepicker_get_path(TRUE, $img) . $img['img_name'];
    $content = '
    <div id="imgp_page">
      <div id="imgp_page_img"><a href="'. $imgsrc .'" alt="'. $img['img_title'] .'" target="_blank"><img src="'. $imgsrc .'" alt="'. $img['img_title'] .'" /></a></div>
      <div>'. nl2br($img['img_description']) .'</div>
';
    if (variable_get('imagepicker_default_pagelink', 1)) {
      $content .= '        <div><a href="#" onclick="history.back()">'. t('Return to page') .'</a></div>
';
    }
    $content .= '      </div>';

  }
  else {
    drupal_set_message(t('Image not found in page.'), 'error');
    $content = '';
  }

  return $content;
}

/**
 * theming
 */
function theme_imagepicker(&$content) {
  $head_title = (drupal_get_title() ? strip_tags(drupal_get_title()) : variable_get('site_name', 'Drupal'));
  $path = drupal_get_path('module', 'imagepicker');
  drupal_add_css($path .'/imagepicker.css');
  $styles = drupal_get_css();
  $scripts = drupal_get_js();
  $tabs = theme('menu_local_tasks');
  $messages = imagepicker_strip_messages(theme('status_messages'));
  include('imagepicker.tpl.php');
  drupal_page_footer();
  exit;
}

/**
 * some common utilities
 */
function imagepicker_get_path($url = FALSE, $userdir = FALSE) {
  global $user, $base_url;

  $dirsep = !$url ? DIRECTORY_SEPARATOR : '/';

  if (!$url) {
    $path = str_replace('/', DIRECTORY_SEPARATOR, getcwd());
  }
  else {
    $path = $base_url;
  }

  $path .= $dirsep . file_directory_path() . $dirsep .'imagepicker'. $dirsep;

  if ($userdir) {
    $username = !is_array($userdir) ? $user->name : $userdir['name'];
    $firstletter = strtolower(substr($username, 0, 1));
    $firstletter = preg_match('/^[a-z]$/', $firstletter) ? $firstletter : 'others';
    $path .= $firstletter . $dirsep . $username . $dirsep;
  }

  return $path;
}

function imagepicker_get_image_path($img, $type = 'browser') {
  $imgbasedir = imagepicker_get_path(FALSE, TRUE);

  switch ($type) {
    case 'browser':
      if (file_exists($imgbasedir .'browser'. DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, TRUE) .'browser/'. $img['img_name'];
      }
      elseif (file_exists($imgbasedir .'thumbs'. DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, TRUE) .'thumbs/'. $img['img_name'];
      }
      break;

    case 'full':
      if (file_exists($imgbasedir . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, TRUE) . $img['img_name'];
      }
      break;

    case 'thumb':
    default:
      if (file_exists($imgbasedir .'thumbs'. DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, TRUE) .'thumbs/'. $img['img_name'];
      }
      elseif (file_exists($imgbasedir .'browser'. DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, TRUE) .'browser/'. $img['img_name'];
      }
      break;
  }

  return $imgpath ? $imgpath : '';
}

// There is not need to inform users, that directory structure has been created
// and show them all paths... So lets strip these messages if there are any.
function imagepicker_strip_messages($msg) {
  if ($msg) {
    $dirsep = (DIRECTORY_SEPARATOR == '\\') ? '\\\\' : '\/';
    $pattern = '/<li>.*'. $dirsep .'imagepicker'. $dirsep .'.*<\/li>/i';
    $msg = preg_replace($pattern, '', $msg);
  }
  return $msg;
}

function imagepicker_js($img) {

  $ret = "
  function imagepickerInsert(button) {
    // Get the form element
    var imgpForm = document.getElementById('imagepicker-image-form');
    if (imgpForm) {
      var imgpShow = 'thumb';
      var imgpLink = 'file';
      var imgpAlign = 'none';
      var imgpImagePath;
      var imgpImageTitle = '". ($img['img_title'] ? addslashes($img['img_title']) : t('Image')) ."';
      var imgpFileLink = '". imagepicker_get_image_path($img, 'full') ."';
      var imgpThumbLink = '". imagepicker_get_image_path($img, 'thumb') ."';
      var imgpPageLink = '". url('imagepicker/image/'. $img['img_id']) ."';
      var imgpImageElement;
      var imgpLinkElement;
      var imgpImageStyle;
      var imgpInsertion;
      var i;

      // Get show value
      for (i = 0; i < imgpForm.show.length; i++) {
        if(imgpForm.show[i].checked) {
          var imgpShow = imgpForm.show[i].value
        }
      }
      // Get link value
      for (i = 0; i < imgpForm.link.length; i++) {
        if(imgpForm.link[i].checked) {
          var imgpLink = imgpForm.link[i].value
        }
      }
";
  if (variable_get('imagepicker_default_align_show', 1)) {
    $ret .= "
      // Get align value
      for (i = 0; i < imgpForm.align.length; i++) {
        if(imgpForm.align[i].checked) {
          var imgpAlign = imgpForm.align[i].value
        }
      }

      // Create a style for image holder
      switch (imgpAlign) {
        case 'fleft':
          imgpImageStyle = '". variable_get('imagepicker_default_fleft', 'style="float: left"') ."';
          break;

        case 'fright':
          imgpImageStyle = '". variable_get('imagepicker_default_fright', 'style="float: right"') ."';
          break;

        case 'none':
        default:
          imgpImageStyle = '';
          break;
      }
";
  }
  else {
    $ret .= "
      imgpImageStyle = '';
";
  }
  $ret .= "
      switch (imgpShow) {
        case 'full': imgpImagePath = imgpFileLink; break;
        case 'title': imgpImagePath = ''; break;
        case 'thumb':
        default: imgpImagePath = imgpThumbLink; break;
      }

      // Create an image or span (containing title) HTML string
      if (imgpImagePath) {
        imgpImageElement = '<img src=\"'+imgpImagePath+'\" alt=\"'+imgpImageTitle+'\" ' + imgpImageStyle + ' \/>';
      }
      else {
        imgpImageElement = '<span>'+imgpImageTitle+'<\/span>'
      }

      // Create a link HTML string
      switch (imgpLink) {
        case 'none': imgpLinkElement = '%imgpImageElement%'; break;
        case 'page': imgpLinkElement = '<a href=\"'+imgpPageLink+'\" title=\"'+imgpImageTitle+'\" >%imgpImageElement%<\/a>'; break;
        case 'file': imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" target=\"_blank\" >%imgpImageElement%<\/a>'; break;
";
  if (module_exists('lightbox2') && variable_get('imagepicker_lightbox2_enable', 1)) {
  $ret .= "
        case 'lightbox': imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" rel=\"" .variable_get('imagepicker_lightbox2_insert', 'lightbox') . "\" >%imgpImageElement%<\/a>'; break;
";
  }
  $ret .= "
        default: imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" target=\"_blank\" >%imgpImageElement%<\/a>'; break;
      }

      // Create a HTML string which should be inserted in the node body
      imgpInsertion = imgpLinkElement.replace('%imgpImageElement%', imgpImageElement);

      // Get the parent window of imagepicker iframe
      var win = window.opener ? window.opener : window.dialogArguments;
      if (!win) {
        win = top;
      }

      var isTinyMCE = win.document.getElementById('mce_editor_0');
      if (isTinyMCE) {
        win.tinyMCE.execCommand('mceInsertContent', false, imgpInsertion);
      }
      else {
        var nodeBody = win.document.getElementById('edit-body');
        var commentBody = win.document.getElementById('edit-comment');
        if (nodeBody) {
          insertAtCursor(nodeBody, imgpInsertion);
        }
        if (commentBody) {
          insertAtCursor(commentBody, imgpInsertion);
        }
      }
    }
  }

  // Copy pasted from internet...
  function insertAtCursor(myField, myValue) {
    //IE support
    if (document.selection) {
      myField.focus();

      //in effect we are creating a text range with zero
      //length at the cursor location and replacing it
      //with myValue
      sel = document.selection.createRange();
      sel.text = myValue;
    }

    //Mozilla/Firefox/Netscape 7+ support
    else if (myField.selectionStart || myField.selectionStart == '0') {

      //Here we get the start and end points of the
      //selection. Then we create substrings up to the
      //start of the selection and from the end point
      //of the selection to the end of the field value.
      //Then we concatenate the first substring, myValue,
      //and the second substring to get the new value.
      var startPos = myField.selectionStart;
      var endPos = myField.selectionEnd;
      myField.value = myField.value.substring(0, startPos)+ myValue + myField.value.substring(endPos, myField.value.length);

    }
    else {
      myField.value += myValue;
    }
  }
";
  return $ret;
}

function imagepicker_img_id_load($arg) {
  return (is_numeric($arg) ? $arg : FALSE);
}
function imagepicker_uid_load($arg) {
  global $user;
  return ((is_numeric($arg) && $user->uid == $arg) ? $arg : FALSE);
}
function imagepicker_path_load($arg) {
  $allowed = array('browse','edit');
  return ( in_array($arg, $allowed) ? $arg : FALSE);
  return $arg;
}


/* my account stuff */
function imagepicker_user_page($uid, $func="", $img_id=0) {
// NOT YET EDITED!!
  $path = drupal_get_path('module', 'imagepicker');
  drupal_add_css($path .'/imagepicker.css');

  $content = theme_imagepicker_user_menu($uid);

  if ($func == 'browse' && is_numeric($img_id) && $img_id > 0) {
    $content .= imagepicker_user_view($img_id);
  }
  elseif ($func == 'browse') {
    $content .= imagepicker_user_browse();
  }
  elseif ($func == 'edit' && is_numeric($img_id)) {
    $content .= imagepicker_user_image_edit($img_id);
  }
  else {
    $content .= imagepicker_user_upload();
  }
  return $content;

}

function imagepicker_user_browse() {
  $content .= _imagepicker_browse("account");
  return $content;
}

function imagepicker_user_view($img_id) {

  $img = _imagepicker_get_img($img_id);
  if ($img) {
    $imgpath = imagepicker_get_image_path($img, 'full');
    $content .= '<div id="imgp_img_view">';
    if ($img['img_title']) {
      $content .= '<div id="imgp_img_view_title">'. $img['img_title'] .'</div>';
    }
    $content .= '<img id="imgp_img_view_img" src="'. $imgpath .'" alt="'. $img['img_title'] .'" title="'. $img['img_name'] .'" />';
    if ($img['img_description']) {
      $content .= '<div id="imgp_img_view_desc">'. nl2br($img['img_description']) .'</div>';
    }
    $imgbasedir = imagepicker_get_path(false, true);
    $file = $imgbasedir . $img['img_name'];
    $info = image_get_info($file);
    $content .= "<div>";
    $content .= t('Width')  .": ". $info['width'] ."&nbsp;&nbsp;&nbsp;";
    $content .= t('Height') .": ". $info['height'] ."&nbsp;&nbsp;&nbsp;";
    $content .= t('Type')   .": ". $info['extension'] ."&nbsp;&nbsp;&nbsp;";
    $content .= t('Size')   .": ". $info['file_size'];
    $content .= "</div>";
    $content .= '</div>';
    $content .= drupal_get_form('imagepicker_user_image_form', $img_id);

  }
  else {
    drupal_set_message(t('Image not found in view.'), 'error');
    $content = '';
  }
  return $content;
}

function imagepicker_user_image_form(&$form_state, $img_id) {
  $form['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit image'),
    '#submit' => array('imagepicker_user_image_form_edit'),
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete image'),
    '#submit' => array('imagepicker_user_image_form_delete'),
  );
  $form['img_id'] = array(
    '#type' => 'hidden',
    '#value' => $img_id,
  );
  return $form;
}

// submit functions
function imagepicker_user_image_form_delete($form, &$form_state) {

  imagepicker_image_delete($form_state['values']['img_id'] , TRUE);
}
function imagepicker_user_image_form_edit($form, &$form_state) {
  global $user;
  drupal_goto('user/'. $user->uid .'/imagepicker/edit/'. $form_state['values']['img_id']);
}

function theme_imagepicker_user_menu($uid) {
  #global $user;
  $path = "user/$uid/imagepicker";
  $items = array(
    l(t('Upload'), $path),
    l(t('Browse'), "$path/browse")
  );
  $content .= theme_item_list($items, NULL, 'ul', $attributes = array('class'=>'tabs secondary'));
  return $content;
}

// the image browser
function _imagepicker_browse($src="iframe") {
  global $user, $base_url;
  $content = "";
  $pageitems = variable_get('imagepicker_advanced_browser_page', 20);
  if ($pageitems > 0) {
#    $pagestart = intval(variable_get('imagepicker_advanced_browser_pagestart', 0));
    $pagestart = variable_get('imagepicker_advanced_browser_pagestart', 0);
    $itemstot = _imagepicker_user_has_img();
    if ( ($pagestart + $pageitems) > $itemstot ) {
      $pageitems = $itemstot - $pagestart;
    }
  }

  if ($pageitems && $itemstot > $pageitems) {
    // use paging
    $imglist = db_query_range("SELECT * FROM {imagepicker} WHERE uid = '%d' ORDER BY img_date DESC", $user->uid, $pagestart, $pageitems);
  }
  else {
    // no paging
    $imglist = db_query("SELECT * FROM {imagepicker} WHERE uid = '%d' ORDER BY img_date DESC", array($user->uid));
  }
  $browsercols = variable_get('imagepicker_advanced_browser_columns', 0);

  if($src == "account") {
    $content .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to view.') .'</div>';
  }
  else {
    $content .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to use.') .'</div>';
  }
  $content .= '<div class="clear-block">';
  $ct = 0;
  $imgct = 0;
  while ($img = db_fetch_array($imglist)) {
    $imgpath = imagepicker_get_image_path($img, 'browser');
    if ($imgpath) {
      if($src == "account") {
        $formlink = url('user/'. $user->uid .'/imagepicker/browse/'. $img['img_id']);
      }
      else {
        $formlink = url('imagepicker/browse/'. $img['img_id']);
      }
      $tooltip =  $img['img_name'].': '. $img['img_title'] .' '. $img['img_description'];
      $content .= '<div class="imgp_holder"><a href="'. $formlink .'">';
      $content .= '<img src="'. $imgpath .'" alt="'. $img['img_title'] .'" title="'. $tooltip .'" />';
      $content .= '</a></div>';
      $ct++;
      if ($browsercols > 0 && $ct >= $browsercols) {
        $content .= '</div><div class="clear-block">';
        $ct = 0;
      }
    }
    $imgct++;
  }
  $content .= '</div>';
  if($imgct < 1) {
    $content = '<div class="messages">'. t('You do not have any uploaded images') .'</div>';
    return $content;
  }

  if ((variable_get('imagepicker_advanced_browser_page', 20) > 0) && $itemstot > $pageitems) {
    $content .='<div class="imgp_help">';
    $content .= t("Showing !ps1 - !ps2 of !itemstot images", array('!ps1'=>($pagestart+1), '!ps2'=>($pagestart+$pageitems), '!itemstot'=>$itemstot));
    $content .='</div>';
    $content .= drupal_get_form('imagepicker_browse_pages_form', $pagestart);
  }

  return $content;
}

function _imagepicker_get_img($img_id, $checkuser=TRUE) {
  global $user;

  $result = db_query_range("SELECT * FROM {imagepicker} WHERE img_id = '%d'", $img_id, 0, 1);
  $img = db_fetch_array($result);
  if ($img) {
    if (($img['uid'] != $user->uid) && $checkuser) {
      drupal_set_message(t('This image does not belong to you.'), 'error');
      watchdog('imagepicker', t('User uid !uid1 attempted to edit image belonging to user uid !uid2', array('!uid1'=>$user->uid, '!uid2'=>$img['uid'])), WATCHDOG_WARNING);
      return FALSE;
    }
    return $img;
  }
  return FALSE;
}

function _imagepicker_user_has_img() {
  global $user;
  $result = db_query("SELECT img_id FROM {imagepicker} WHERE uid = '%d'", array($user->uid));
  $ct = 0;
  while ($row = db_fetch_array($result)) {
    $ct++;
  }
  return $ct;
}

/**
 * pager buttons form
 */
function imagepicker_browse_pages_form(&$form_state, $pagestart) {
  $pageitems = variable_get('imagepicker_advanced_browser_page', 20);
  $itemstot = _imagepicker_user_has_img();

  if ( $pagestart > 0 ) {
    $form['first'] = array(
      '#type' => 'submit',
      '#value' => t('<< First'),
      '#submit' => array('imagepicker_browse_pages_first_submit'),
    );
    $form['previous'] = array(
      '#type' => 'submit',
      '#value' => t('< Previous'),
      '#submit' => array('imagepicker_browse_pages_previous_submit'),
    );
  }
  else {
    $form['first'] = array(
      '#type' => 'submit',
      '#value' => t('<< First'),
      '#disabled' => TRUE,
      '#attributes' => array('class' => 'disabled')
    );
    $form['previous'] = array(
      '#type' => 'submit',
      '#value' => t('< Previous'),
      '#disabled' => TRUE,
      '#attributes' => array('class' => 'disabled')
    );
  }
  if ( ($pagestart+$pageitems) >= $itemstot ) {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next >'),
      '#disabled' => TRUE,
      '#attributes' => array('class' => 'disabled')
    );
  }
  else {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next >'),
      '#submit' => array('imagepicker_browse_pages_next_submit'),
    );

  }
  $form['last'] = array(
    '#type' => 'submit',
    '#value' => t('Last >>'),
    '#submit' => array('imagepicker_browse_pages_last_submit'),
  );
  $form['pagestart'] = array(
    '#type' => 'hidden',
    '#value' => "$pagestart",
  );
  return $form;
}

/**
 * Pager form Submit
 * one for each button
 */
function imagepicker_browse_pages_first_submit($form, &$form_state) {
  variable_set('imagepicker_advanced_browser_pagestart', 0);
}
function imagepicker_browse_pages_previous_submit($form, &$form_state) {
  $pagestart = $form_state['values']['pagestart'];
  $pageitems = variable_get('imagepicker_advanced_browser_page', 20);
  $pagestart = $pagestart - $pageitems;
  if ($pagestart < 0) { $pagestart = 0; }
  variable_set('imagepicker_advanced_browser_pagestart', $pagestart);
}
function imagepicker_browse_pages_next_submit($form, &$form_state) {
  $pagestart = $form_state['values']['pagestart'];
  $pageitems = variable_get('imagepicker_advanced_browser_page', 20);
  $itemstot = _imagepicker_user_has_img();
  if ( ($pagestart + $pageitems) >= $itemstot ) {
    $pagestart = $itemstot-1;
  }
  else {
    $pagestart = $pagestart + $pageitems;
  }
  variable_set('imagepicker_advanced_browser_pagestart', $pagestart);
}
function imagepicker_browse_pages_last_submit($form, &$form_state) {
  $pageitems = variable_get('imagepicker_advanced_browser_page', 20);
  $itemstot = _imagepicker_user_has_img();
  $pagestart = $itemstot - $pageitems;
  variable_set('imagepicker_advanced_browser_pagestart', $pagestart);
}
