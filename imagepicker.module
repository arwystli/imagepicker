<?php
// $Id$
// $Name$
// for D6. Version 2
/**
 * @file
 * Enables permitted roles to upload images for insertion into configured nodes.
 */

define('IMAGEPICKER_FILES_DIR', 'imagepicker');
define('IMAGEPICKER_THUMBS_DIR', 'thumbs');
define('IMAGEPICKER_BROWSER_DIR', 'browser');

/**
 * Implementation of hook_help().
 */
function imagepicker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#imagepicker':
      $output = '<p>'. t('Adds an advanced image upload form under the node body part.') .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function imagepicker_perm() {
  return array('administer imagepicker', 'use imagepicker', 'access own imagepicker', 'use public imagepicker', 'create public groups');
}

/**
 * Implementation of hook_menu().
 */
function imagepicker_menu() {
  $items = array();
  $items['imagepicker'] = array(
    'title' => 'Image picker',
    'page callback' => 'imagepicker_upload',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_CALLBACK,
    'file' => 'imagepicker.upload.inc',
  );
  $items['imagepicker/upload'] = array(
    'title' => 'Upload',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1
  );
  $items['imagepicker/browse'] = array(
    'title' => 'Browse',
    'page callback' => 'imagepicker_browse',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  if (variable_get('imagepicker_public_enabled', 1)) {
    $items['imagepicker/browse_public'] = array(
      'title' => 'Browse Public',
      'page callback' => 'imagepicker_browse_public',
      'access arguments' => array('use public imagepicker'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3
    );
  }
  $items['imagepicker/groups'] = array(
    'title' => 'Groups',
    'page callback' => 'imagepicker_groups',
    'access arguments' => array('use imagepicker'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.group.inc',
    'weight' => 4
  );
  $items['imagepicker/browse/%imagepicker_id'] = array(
    'title' => 'Browse',
    'page callback' => 'imagepicker_browse',
    'page arguments' => array(2),
    'access arguments' => array('use imagepicker'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  $items['imagepicker/edit/%imagepicker_id'] = array(
    'title' => 'Edit image',
    'page callback' => 'imagepicker_image_edit',
    'page arguments' => array(2),
    'access arguments' => array('use imagepicker'),
    'type' => MENU_CALLBACK,
    'file' => 'imagepicker.edit.inc',
  );
  $items['imagepicker/image/%imagepicker_id'] = array(
    'title' => 'Imagepicker',
    'page callback' => 'imagepicker_image_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // admin settings
  $items['admin/settings/imagepicker'] = array(
    'title' => 'Imagepicker',
    'description' => 'Imagepicker settings.',
    'page callback' => 'imagepicker_settings_page',
    'access arguments' => array('administer imagepicker'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'imagepicker.admin.inc',
  );
  $items['admin/settings/imagepicker/general'] = array(
    'title' => 'General',
    'description' => 'Imagepicker settings.',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagepicker_settings_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // admin groups and images
  $items['admin/settings/imagepicker/groups'] = array(
    'title' => 'Groups',
    'description' => 'Show user groups.',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'imagepicker_admin_groups',
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.admin.inc',
    'weight' => -8,
  );
  $items['admin/settings/imagepicker/groups/autocomplete'] = array(
    'title' => '',
    'description' => '',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'imagepicker_group_search_autocomplete',
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.admin.inc',
    'weight' => -9,
  );
  $items['admin/settings/imagepicker/images'] = array(
    'title' => 'Images',
    'description' => 'Show user images.',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'imagepicker_admin_images',
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.admin.inc',
    'weight' => -9,
  );
  $items['admin/settings/imagepicker/images/autocomplete'] = array(
    'title' => '',
    'description' => '',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'imagepicker_user_autocomplete',
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.admin.inc',
    'weight' => -9,
  );
  // admin validation
  $items['admin/settings/imagepicker/convert'] = array(
    'title' => 'Validate Files',
    'description' => 'Validate and convert Imagepicker Files.',
    'access arguments' => array('administer imagepicker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagepicker_convert_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'imagepicker.admin.inc',
    'weight' => -7,
  );
  // account
  if (variable_get('imagepicker_account_enabled', 1)) {

    if (user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1) && arg(3) == 'browse_public' && is_numeric(arg(4))) {
    $items['user/'. arg(1) .'/imagepicker/images/browse_public'] = array(
      'title'            => 'My imagepicker',
      'description'      => 'Manage your imagepicker files.',
      'page callback'    => 'imagepicker_user_page',
      'page arguments'   => array(1, 3, 4),
      'access arguments' => array('access own imagepicker'),
      'type'             => MENU_LOCAL_TASK,

    );
    $items['user/'. arg(1) .'/imagepicker/images/browse_public/%imagepicker_id'] = array(
      'title'            => 'My imagepicker',
      'description'      => 'Manage your imagepicker files.',
      'page callback'    => 'imagepicker_user_page',
      'page arguments'   => array(1, 3, 4, 5),
      'access arguments' => array('access own imagepicker'),
      'type'             => MENU_LOCAL_TASK,

    );

    }
    else {
      $items['user/%imagepicker_uid/imagepicker'] = array(
        'title'            => 'My imagepicker',
        'description'      => 'Manage your imagepicker files.',
        'page callback'    => 'imagepicker_user_page',
        'page arguments'   => array(1),
        'access arguments' => array('access own imagepicker'),
        'type'             => MENU_LOCAL_TASK,
        'file'             => 'imagepicker.upload.inc',
      );
      // user/x/imagepicker/images
      // user/x/imagepicker/images/browse
      // user/x/imagepicker/images/edit/n
      // user/x/imagepicker/images/delete/n
      // user/x/imagepicker/groups
      // user/x/imagepicker/groups/browse
      // user/x/imagepicker/groups/edit/n
      // user/x/imagepicker/groups/delete/n
      // user/x/imagepicker/groups/otherfunc/n
      $items['user/%imagepicker_uid/imagepicker/%imagepicker_path'] = array(
        'title'            => 'My imagepicker',
        'description'      => 'Manage your imagepicker files.',
        'page callback'    => 'imagepicker_user_page',
        'page arguments'   => array(1, 3),
        'access arguments' => array('access own imagepicker'),
        'type'             => MENU_LOCAL_TASK,
      );
      $items['user/%imagepicker_uid/imagepicker/%imagepicker_path/%imagepicker_func/%imagepicker_id'] = array(
        'title'            => 'My imagepicker',
        'description'      => 'Manage your imagepicker files.',
        'page callback'    => 'imagepicker_user_page',
        'page arguments'   => array(1, 3, 4, 5),
        'access arguments' => array('access own imagepicker'),
        'type'             => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * menu placeholder functions
 */
function imagepicker_id_load($arg) {
  return (is_numeric($arg) ? $arg : FALSE);
}

function imagepicker_uid_load($arg) {
  global $user;
  return ((is_numeric($arg) && $user->uid == $arg) ? $arg : FALSE);
}

function imagepicker_path_load($arg) {
  $allowed = array('upload', 'images', 'groups', 'stats');
  return ( in_array($arg, $allowed) ? $arg : FALSE);
  return $arg;
}

function imagepicker_func_load($arg) {
  $allowed = array('browse', 'browseadmin', 'edit', 'delete', 'browse_public');
  return ( in_array($arg, $allowed) ? $arg : FALSE);
  return $arg;
}

/**
 * Implementation of hook_form_alter().
 */
function imagepicker_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $node_types = node_get_types('names');
  $node_type = in_array($node->type, variable_get('imagepicker_node_types_enabled', array_keys($node_types)), TRUE);
  // comment
  $comment = FALSE;
  $weight = 1;
  if (module_exists('comment') && variable_get('imagepicker_comment_enabled', 0) && preg_match('/comment_form$/i', $form_id) ) {
    $comment = TRUE;
    $weight = 1;
  }
  // blocks
  $block = FALSE;
  if (preg_match('/block_form$/i', $form_id) && variable_get('imagepicker_blocks_enabled', 0)) {
    $block = TRUE;
    $weight = 1;
  }
  if (user_access('use imagepicker')) {
    if (($node_type && preg_match('/node_form$/i', $form_id) ) || $comment ) {
      $form['body_field']['body_filter']['file_upload'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image picker'),
        '#collapsible' => 1,
        '#collapsed' => variable_get('imagepicker_advanced_collapsed', 0),
        '#weight' => $weight,
      );
      $form['body_field']['body_filter']['#weight'] = 2;
      $form['body_field']['body_filter']['file_upload']['mpframe'] = array(
        '#type' => 'markup',
        '#value' => '<div><iframe id="imagepicker" style="width: '. variable_get('imagepicker_advanced_iframe_width', "100%") .'; height: '. variable_get('imagepicker_advanced_iframe_height', 500) .'px; border: '. variable_get('imagepicker_advanced_iframe_border', "0") .';" src="'. url('imagepicker') .'">Imagepicker requires iframe support.</iframe></div>',
      );
      $form['body_field']['#prefix'] = '<a name="body_hash"></a>'. $form['body_field']['#prefix'];
    }
    elseif ($block) {
      $form['block_settings']['file_upload'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image picker'),
        '#collapsible' => 1,
        '#collapsed' => variable_get('imagepicker_advanced_collapsed', 0),
        '#weight' => $weight,
      );
      $form['block_settings']['file_upload']['mpframe'] = array(
        '#type' => 'markup',
        '#value' => '<div><iframe id="imagepicker" style="width: '. variable_get('imagepicker_advanced_iframe_width', "100%") .'; height: '. variable_get('imagepicker_advanced_iframe_height', 500) .'px; border: '. variable_get('imagepicker_advanced_iframe_border', "0") .';" src="'. url('imagepicker') .'">Imagepicker requires iframe support.</iframe></div>',
      );
      $form['block_settings']['#prefix'] = '<a name="body_hash"></a>'. $form['block_settings']['#prefix'];

    }
  }
}

/**
 * theme registry
 */
function imagepicker_theme() {
  return array(
    'imagepicker' => array(
      'arguments' => array(
        'content' => NULL),
    ),
  );
}

/**
 * Menu local task; presents the browse and select pages for imagepicker
 */
function imagepicker_browse($img_id=0) {

  if ( $img_id ) {
    imagepicker_image_select($img_id);
    exit();
  }

  $content = _imagepicker_browse();
  theme('imagepicker', $content);
}

function imagepicker_browse_public($img_id=0) {

  if ( $img_id ) {
    imagepicker_image_select($img_id, FALSE, TRUE);
    exit();
  }

  $content = _imagepicker_browse_public();
  theme('imagepicker', $content);
}

function imagepicker_image_select($img_id, $showgroup=TRUE, $public = FALSE, $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $img = _imagepicker_get_img($img_id, ($public ? FALSE : TRUE));
  if ($img) {
    drupal_add_js(imagepicker_js($img, $public), 'inline');
    $imgpath = imagepicker_get_image_path($img, 'browser', ($public ? array('name' => $img['name'] , 'uid' => $img['uid']) : FALSE ));
    $content = '<div class="imgp_help">'. t('Choose the settings you want, place the cursor in the Body box above and Insert image.') .'</div>';
    if ($img['img_title']) {
      $content .= '<div id="imgp_img_holder_title">'. check_plain($img['img_title']) .'</div>';
    }
    if ($img['img_description']) {
      $content .= '<div id="imgp_img_holder_description">'. $img['img_description'] .'</div>';
    }
    $content .= '<div id="imgp_img_holder">';
    $content .= '<img id="imgp_img" src="'. $imgpath .'" alt="'. check_plain($img['img_title']) .'" title="'. $img['img_name'] .'" />';
    $content .= '</div>';

    if ($user->uid == $img['uid'] || $public) {
      $content .= drupal_get_form('imagepicker_image_form', $img['img_id'], $public);
    }

    // groups
    if (_imagepicker_has_groups() && $showgroup) {
      $content .= drupal_get_form('imagepicker_group_images_form', $img['img_id']);
    }
  }
  else {
    drupal_set_message(t('Image not found.'), 'error');
    $content = '';
  }

  theme('imagepicker', $content);
}

function imagepicker_image_form($form_state, $img_id, $public = FALSE) {
  $showoptions = array('full' => t('Full size'), 'thumb' => t('Thumbnail'), 'title' => t('Title'));
  $linkoptions = array('none' => t('None'), 'file' => t('File'), 'page' => t('Page') );
  if (module_exists('lightbox2') && variable_get('imagepicker_lightbox2_enable', 1) ) {
    $linkoptions['lightbox'] = t('Lightbox');
  }
  if (variable_get('imagepicker_default_align_show', 1)) {
    $alignoptions = array('none' => t('None'), 'fleft' => t('Float Left'), 'fright' => t('Float right'));
    $form['align'] = array(
      '#type' => 'radios',
      '#title' => t('Align'),
      '#default_value' => variable_get('imagepicker_insert_defaults_align', 'none'),
      '#options' => $alignoptions,
      '#description' => '',
      '#prefix' => '<div class="imgp_img_options">',
      '#suffix' => '</div>'
    );
  }
  $form['show'] = array(
    '#type' => 'radios',
    '#id' => 'show',
    '#title' => t('Show'),
    '#default_value' => variable_get('imagepicker_insert_defaults_show', 'full'),
    '#options' => $showoptions,
    '#description' => '',
    '#prefix' => '<div class="imgp_img_options">',
    '#suffix' => '</div>'
  );
  $form['link'] = array(
    '#type' => 'radios',
    '#title' => t('Link'),
    '#default_value' => variable_get('imagepicker_insert_defaults_link', 'none'),
    '#options' => $linkoptions,
    '#description' => '',
    '#prefix' => '<div class="imgp_img_options">',
    '#suffix' => '</div>'
  );
  $form['insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert image'),
    '#prefix' => '<div id="imgp_controls">',
    '#attributes' => array('onclick' => 'imagepickerInsert(this); return false;')
  );
  if (! $public) {
    $form['edit'] = array(
      '#type' => 'submit',
      '#value' => t('Edit image'),
      '#submit' => array('imagepicker_image_form_edit'),
    );
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete image'),
      '#submit' => array('imagepicker_image_form_delete'),
      '#suffix' => '</div>'
    );
  }
  $form['img_id'] = array(
    '#type' => 'hidden',
    '#value' => $img_id,
  );

  return $form;
}

/**
 * Submit form functions
 */
function imagepicker_image_form_delete($form, &$form_state) {
  imagepicker_image_delete($form_state['values']['img_id']);
}

function imagepicker_image_form_edit($form, &$form_state) {
  drupal_goto('imagepicker/edit/'. $form_state['values']['img_id']);
}

function imagepicker_image_delete($img_id, $account=FALSE, $src='iframe') {

  if ($account) {
    $user = $account;
    $userdir = array('name' => $user->name, 'uid' => $user->uid);
  }
  else {
    global $user;
    $userdir = TRUE;
  }
  if ($src == 'account') {
    $outpath = 'user/'. $user->uid .'/imagepicker/images/browse';
  }
  elseif ($src == 'admin') {
    $outpath = 'admin/settings/imagepicker/images/user/'. $user->uid .'/browse';
  }
  else {
    $outpath ='imagepicker/browse';
  }

  $img = _imagepicker_get_img($img_id, ($src=='admin' ? FALSE : TRUE), ($account ? $user : FALSE));
  if ($img) {
    $destination = imagepicker_get_path(FALSE, $userdir);
    $thumbsdir = $destination . IMAGEPICKER_THUMBS_DIR . DIRECTORY_SEPARATOR;
    $browserdir = $destination . IMAGEPICKER_BROWSER_DIR . DIRECTORY_SEPARATOR;
    file_delete($destination . $img['img_name']);
    file_delete($thumbsdir . $img['img_name']);
    file_delete($browserdir . $img['img_name']);
    if (db_query("DELETE FROM {imagepicker} WHERE uid = %d AND img_id = %d", array($user->uid, $img_id))) {
      // groups entries
      db_query("DELETE FROM {imagepicker_group_images} WHERE img_id = %d", array($img_id));
      drupal_set_message(t('Image was successfully deleted'));
    }
    else {
      drupal_set_message(t('Error while trying to delete your image from database.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Image not found.'), 'error');
  }
  drupal_goto($outpath);
}

/**
 * Menu callback; presents the image page for imagepicker
 */
function imagepicker_image_page($img_id) {
  global $base_url;

  $result = db_query_range("SELECT i.*, u.name FROM {imagepicker} AS i JOIN {users} AS u USING (uid) WHERE img_id = '%d'", $img_id, 0, 1);
  $img = db_fetch_array($result);
  if ($img && is_array($img) && count($img)) {
    $path = drupal_get_path('module', 'imagepicker');
    drupal_add_css($path .'/imagepicker.css');
    drupal_set_title($img['img_title']);
    $imgsrc = imagepicker_get_path(TRUE, $img) . $img['img_name'];
    $content = '
<div id="imgp_page"><div id="imgp_page_img">
<a href="'. $imgsrc .'" alt="'. $img['img_title'] .'" target="_blank">
<img src="'. $imgsrc .'" alt="'. $img['img_title'] .'" /></a></div>
<div>'. nl2br($img['img_description']) .'</div>
';

    if (variable_get('imagepicker_default_pagelink', 1)) {
      $content .= '<div><a href="#" onclick="history.back()">'. t('Return to page') .'</a></div>';
    }
    $content .= '</div>';
  }
  else {
    drupal_set_message(t('Image not found in page.'), 'error');
    $content = '';
  }

  return $content;
}

/**
 * theming
 */
function theme_imagepicker(&$content) {
  $head_title = (drupal_get_title() ? strip_tags(drupal_get_title()) : variable_get('site_name', 'Drupal'));
  $path = drupal_get_path('module', 'imagepicker');
  drupal_add_css($path .'/imagepicker.css');
  $styles = drupal_get_css();
  $scripts = drupal_get_js();
  $tabs = theme('menu_local_tasks');
  $messages = imagepicker_strip_messages(theme('status_messages'));
  $template = 'imagepicker.tpl.php';
  $defaulttemplate = variable_get('theme_default', '');
  if ($defaulttemplate) {
    $templatepath = drupal_get_path('theme', $defaulttemplate);
    if (file_exists($templatepath .'/'. $template)) {
      $template = $templatepath .'/'. $template;
    }
  }
  include($template);
  drupal_page_footer();
  exit;
}

/**
 * some common utilities
 */
function imagepicker_get_path($url = FALSE, $userdir = FALSE) {
  global $user, $base_url;

  $dirsep = !$url ? DIRECTORY_SEPARATOR : '/';

  if (!$url) {
    $path = str_replace('/', DIRECTORY_SEPARATOR, getcwd());
  }
  else {
    if (variable_get('imagepicker_use_full_url', 1)) {
      $path = $base_url;
    }
    else {
      $path = base_path();
      $path = preg_replace("/\/$/", "", $path);
    }
  }

  $path .= $dirsep . file_directory_path() . $dirsep . IMAGEPICKER_FILES_DIR . $dirsep;

  // old or new
  $fstype = variable_get('imagepicker_fstype', '');

  if ($userdir) {
    if ($fstype == 'alpha') {
      $username = !is_array($userdir) ? $user->name : $userdir['name'];
      $firstletter = drupal_strtolower(drupal_substr($username, 0, 1));
      $firstletter = preg_match('/^[a-z]$/', $firstletter) ? $firstletter : 'others';
      $path .= $firstletter . $dirsep . $username . $dirsep;
    }
    else {
      $useruid = !is_array($userdir) ? $user->uid : $userdir['uid'];
      $path .= $useruid . $dirsep;
    }
  }

  return $path;
}

function imagepicker_get_image_path($img, $type = 'browser', $public = FALSE) {

  $imgbasedir = imagepicker_get_path(FALSE, ($public ? $public : TRUE ));
  switch ($type) {
    case 'browser':
      if (file_exists($imgbasedir . IMAGEPICKER_BROWSER_DIR . DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, ($public ? $public : TRUE )) . IMAGEPICKER_BROWSER_DIR .'/'. $img['img_name'];
      }
      elseif (file_exists($imgbasedir . IMAGEPICKER_THUMBS_DIR . DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, ($public ? $public : TRUE )) . IMAGEPICKER_THUMBS_DIR .'/'. $img['img_name'];
      }
      break;

    case 'full':
      if (file_exists($imgbasedir . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, ($public ? $public : TRUE )) . $img['img_name'];
      }
      break;

    case 'thumb':
    default:
      if (file_exists($imgbasedir . IMAGEPICKER_THUMBS_DIR . DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, ($public ? $public : TRUE )) . IMAGEPICKER_THUMBS_DIR .'/'. $img['img_name'];
      }
      elseif (file_exists($imgbasedir . IMAGEPICKER_BROWSER_DIR . DIRECTORY_SEPARATOR . $img['img_name'])) {
        $imgpath = imagepicker_get_path(TRUE, ($public ? $public : TRUE )) . IMAGEPICKER_BROWSER_DIR .'/'. $img['img_name'];
      }
      break;
  }

  return $imgpath ? $imgpath : '';
}

// There is not need to inform users, that directory structure has been created
// and show them all paths... So lets strip these messages if there are any.
function imagepicker_strip_messages($msg) {
  if ($msg) {
    $dirsep = (DIRECTORY_SEPARATOR == '\\') ? '\\\\' : '\/';
    $pattern = '/<li>.*'. $dirsep .'imagepicker'. $dirsep .'.*<\/li>/i';
    $msg = preg_replace($pattern, '', $msg);
  }
  return $msg;
}

/**
 * javascript insertion routine
 */
function imagepicker_js($img, $public = FALSE) {

  $ret = "
  function imagepickerInsert(button) {
    // Get the form element
    var imgpForm = document.getElementById('imagepicker-image-form');
    if (imgpForm) {
      var imgpShow = 'thumb';
      var imgpLink = 'file';
      var imgpAlign = 'none';
      var imgpImagePath;
      var imgpImageTitle = '". ($img['img_title'] ? addslashes(check_plain($img['img_title'])) : t('Image')) ."';
      var imgpFileLink = '". imagepicker_get_image_path($img, 'full', ($public ? array('name' => $img['name'], 'uid' => $img['uid'] ) : FALSE) ) ."';
      var imgpThumbLink = '". imagepicker_get_image_path($img, 'thumb', ($public ? array('name' => $img['name'], 'uid' => $img['uid'] ) : FALSE)) ."';
      var imgpPageLink = '". url('imagepicker/image/'. $img['img_id']) ."';
      var imgpImageElement;
      var imgpLinkElement;
      var imgpImageStyle;
      var isFCKeditor = '". (module_exists('fckeditor') ? 'yes' : 'no' ) ."'
      var isWysiwyg = '". (module_exists('wysiwyg') ? 'yes' : 'no' ) ."'
      var imgpInsertion;
      var i;

      // Get show value
      for (i = 0; i < imgpForm.show.length; i++) {
        if(imgpForm.show[i].checked) {
          var imgpShow = imgpForm.show[i].value
        }
      }
      // Get link value
      for (i = 0; i < imgpForm.link.length; i++) {
        if(imgpForm.link[i].checked) {
          var imgpLink = imgpForm.link[i].value
        }
      }
";
  if (variable_get('imagepicker_default_align_show', 1)) {
    $ret .= "
      // Get align value
      for (i = 0; i < imgpForm.align.length; i++) {
        if(imgpForm.align[i].checked) {
          var imgpAlign = imgpForm.align[i].value
        }
      }

      // Create a style for image holder
      switch (imgpAlign) {
        case 'fleft':
          imgpImageStyle = '". variable_get('imagepicker_default_fleft', 'style="float: left"') ."';
          break;

        case 'fright':
          imgpImageStyle = '". variable_get('imagepicker_default_fright', 'style="float: right"') ."';
          break;

        case 'none':
        default:
          imgpImageStyle = '';
          break;
      }
";
  }
  else {
    $ret .= "
      imgpImageStyle = '';
";
  }
  $ret .= "
      switch (imgpShow) {
        case 'full': imgpImagePath = imgpFileLink; break;
        case 'title': imgpImagePath = ''; break;
        case 'thumb':
        default: imgpImagePath = imgpThumbLink; break;
      }

      // Create an image or span (containing title) HTML string
      if (imgpImagePath) {
        imgpImageElement = '<img src=\"'+imgpImagePath+'\" alt=\"'+imgpImageTitle+'\" ' + imgpImageStyle + ' \/>';
      }
      else {
        imgpImageElement = '<span>'+imgpImageTitle+'<\/span>'
      }

      // Create a link HTML string
      switch (imgpLink) {
        case 'none': imgpLinkElement = '%imgpImageElement%'; break;
        case 'page': imgpLinkElement = '<a href=\"'+imgpPageLink+'\" title=\"'+imgpImageTitle+'\" >%imgpImageElement%<\/a>'; break;
        case 'file': imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" target=\"_blank\" >%imgpImageElement%<\/a>'; break;
";
  if (module_exists('lightbox2') && variable_get('imagepicker_lightbox2_enable', 1)) {
  $ret .= "
        case 'lightbox': imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" rel=\"". variable_get('imagepicker_lightbox2_insert', 'lightbox') ."\" >%imgpImageElement%<\/a>'; break;
";
  }
  $ret .= "
        default: imgpLinkElement = '<a href=\"'+imgpFileLink+'\" title=\"'+imgpImageTitle+'\" target=\"_blank\" >%imgpImageElement%<\/a>'; break;
      }
      // Create a HTML string which should be inserted in the node body
      imgpInsertion = imgpLinkElement.replace('%imgpImageElement%', imgpImageElement);

      // Get the parent window of imagepicker iframe
      var win = window.opener ? window.opener : window.dialogArguments;
      if (!win) {
        win = top;
      }

      // track down a wysiwyg editor
      var jobdone = false;
      var inst = false;
      if (win.oFCK_1) {
        inst = win.oFCK_1.InstanceName;
      }
      else if (win.oFCKeditor) {
        inst = win.oFCKeditor.InstanceName;
      }
      else if (isWysiwyg == 'yes') {
        inst = 'edit-body';
      }

      if (inst) {
        if (win.FCKeditorAPI) {
          myFCKeditor = win.FCKeditorAPI.GetInstance(inst);
          if (myFCKeditor) {
            myFCKeditor.InsertHtml(imgpInsertion);
            jobdone = true;
          }
        }
      }

      //var isTinyMCE = win.document.getElementById('mce_editor_0'); // buggy
      var isTinyMCE = win.tinyMCE; // Will be undefined if tinyMCE isn't loaded. This isn't a sure-proof way of knowing if tinyMCE is loaded into a field, but it works.
      if (isTinyMCE) {
        win.tinyMCE.execCommand('mceInsertContent', false, imgpInsertion);
        jobdone = true;
      }

      if (! jobdone) {
        var nodeBody = win.document.getElementById('edit-body');
        var commentBody = win.document.getElementById('edit-comment');
        if (nodeBody) {
          insertAtCursor(nodeBody, imgpInsertion);
        }
        if (commentBody) {
          insertAtCursor(commentBody, imgpInsertion);
        }
      }
      win.location.hash='body_hash';
    }
  }

  // Copy pasted from internet...
  function insertAtCursor(myField, myValue) {
    //IE support
    if (document.selection) {
      myField.focus();

      //in effect we are creating a text range with zero
      //length at the cursor location and replacing it
      //with myValue
      sel = document.selection.createRange();
      sel.text = myValue;
    }

    //Mozilla/Firefox/Netscape 7+ support
    else if (myField.selectionStart || myField.selectionStart == '0') {

      //Here we get the start and end points of the
      //selection. Then we create substrings up to the
      //start of the selection and from the end point
      //of the selection to the end of the field value.
      //Then we concatenate the first substring, myValue,
      //and the second substring to get the new value.
      var startPos = myField.selectionStart;
      var endPos = myField.selectionEnd;
      myField.value = myField.value.substring(0, startPos)+ myValue + myField.value.substring(endPos, myField.value.length);

    }
    else {
      myField.value += myValue;
    }
  }
";
  return $ret;
}

/**
 * my imagepicker in my account
 */
function imagepicker_user_page($uid, $path="", $func="", $id=0) {
  drupal_add_css(drupal_get_path('module', 'imagepicker') .'/imagepicker.css');

  $content = theme_imagepicker_user_menu($uid, ($func == 'browse' ? 'browse' : 'browseadmin'));

  // path/func/id
  if ($path == 'images') {
    if ( ($func == 'browse' || $func == 'browseadmin') && is_numeric($id) && $id > 0) {
      $content .= imagepicker_user_view($id);
    }
    elseif ($func == 'edit' && is_numeric($id) && $id > 0) {
      include_once('imagepicker.edit.inc');
      $content .= imagepicker_user_image_edit($id);
    }
    elseif ($func == 'browse') {
      $content .= imagepicker_user_browse();
    }
    elseif ($func == 'browse_public') {
      if (is_numeric($id) && $id > 0) {
        $content .= imagepicker_user_view_public($id);
      }
      else {
        $content .= imagepicker_user_browse_public();
      }
    }
    elseif ($func == 'browseadmin') {
      $content .= imagepicker_user_browse_admin();
    }
    elseif ($func == 'delete' && is_numeric($id) && $id > 0) {
      imagepicker_image_delete($id, FALSE, 'account');
    }
  }
  elseif ($path == 'groups') {
    include_once('imagepicker.group.inc');
    if ($func == 'edit' && is_numeric($id) && $id > 0) {
      $content .= imagepicker_user_groups($func, $id);
    }
    elseif ($func == 'browse' && is_numeric($id) && $id > 0) {
      imagepicker_set_user_group_state(1, $id);
      $content .= imagepicker_user_browse();
    }
    elseif ($func == 'browse') {
      $content .= imagepicker_user_groups();
    }
    elseif ($func == 'delete') {
      $content .= drupal_get_form('imagepicker_group_delete_form', $id);
    }
  }
  elseif ($path == 'stats') {
    $content .= imagepicker_group_stats(-1);
  }
  else {
    include_once('imagepicker.upload.inc');
    $content .= imagepicker_user_upload();
  }
  return $content;
}

/**
 * main thumbnails page in my imagepicker
 */
function imagepicker_user_browse() {
  $content = _imagepicker_browse("account");
  return $content;
}

function imagepicker_user_browse_public() {
  $content = _imagepicker_browse_public("account", 1);
  return $content;
}

function imagepicker_user_browse_admin() {
  $content = _imagepicker_browse_admin("account");
  return $content;
}

function imagepicker_user_view($img_id) {

  $img = _imagepicker_get_img($img_id);
  if ($img) {
    $imgpath = imagepicker_get_image_path($img, 'full');
    $info = image_get_info(imagepicker_get_path(FALSE, TRUE) . $img['img_name']);
    $content = _imagepicker_view_content($img, $imgpath, $info) .
    drupal_get_form('imagepicker_user_image_form', $img_id) .
    '<br />'.
    (_imagepicker_has_groups() ? drupal_get_form('imagepicker_group_images_form', $img['img_id']) : '');
  }
  else {
    drupal_set_message(t('Image not found.'), 'error');
    $content = '';
  }
  return $content;
}

function imagepicker_user_view_public($img_id) {

  $img = _imagepicker_get_img($img_id, FALSE);
  if ($img) {

    $result = db_query("SELECT name FROM {users} WHERE uid=%d AND status=1", array($img['uid']));
    $row = db_fetch_array($result);
    $img['name'] = ($row['name'] ? $row['name'] : FALSE);

    $imgpath = imagepicker_get_image_path($img, 'full', array('name' => $img['name'] , 'uid' => $img['uid'] ));
    $info = image_get_info(imagepicker_get_path(FALSE, array('name' => $img['name'] , 'uid' => $img['uid'] )) . $img['img_name']);
    $content = _imagepicker_view_content($img, $imgpath, $info);
  }
  else {
    drupal_set_message(t('Image not found.'), 'error');
    $content = '';
  }
  return $content;
}

function imagepicker_user_image_form(&$form_state, $img_id) {
  $form['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit image'),
    '#submit' => array('imagepicker_user_image_form_edit'),
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete image'),
    '#submit' => array('imagepicker_user_image_form_delete'),
  );
  $form['img_id'] = array(
    '#type' => 'hidden',
    '#value' => $img_id,
  );
  return $form;
}

function imagepicker_user_image_form_delete($form, &$form_state) {
  imagepicker_image_delete($form_state['values']['img_id'] , FALSE, 'account');
}

function imagepicker_user_image_form_edit($form, &$form_state) {
  global $user;
  drupal_goto('user/'. $user->uid .'/imagepicker/images/edit/'. $form_state['values']['img_id']);
}

function theme_imagepicker_user_menu($uid, $mode = 'browse') {
  #global $user;
  $path = "user/$uid/imagepicker";
  $items = array(
    l(t('Upload'), $path),
    ($mode == 'browse' ? l(t('List'), "$path/images/browseadmin") : l(t('Browse'), "$path/images/browse")),
    l(t('Groups'), "$path/groups/browse" ),
    l(t('Stats'), "$path/stats"),
  );
  if ( user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1) ) {
    $items[] = l(t('Browse Public'), "$path/images/browse_public");
  }
  $content .= theme_item_list($items, NULL, 'ul', $attributes = array('class' => 'tabs secondary'));
  return $content;
}

function _imagepicker_browse($src="iframe", $account = FALSE) {
  if ($account) {
    $user = $account;
    $userdir = array( 'uid' => $user->uid, 'name' => $user->name);
  }
  else {
    global $user;
    $userdir = FALSE;
  }

  // if there are groups
  $gid = 0;
  if (_imagepicker_has_groups($user)) {
    $gids = imagepicker_get_user_group_state(1, $user);
    $gid = $gids[0];
    if ($account) {
      $gid = variable_get('imagepicker_currentgroup', 0);
    }
  }
  $how_many = variable_get('imagepicker_advanced_browser_page', 25);
  $default_order = variable_get('imagepicker_default_browser_order', 'img_id DESC');
  if ($account && $src == 'admin') {
    $order = variable_get('imagepicker_browser_order', $default_order);
  }
  else {
    $order = ($user->imagepicker_browser_order ? $user->imagepicker_browser_order : $default_order );
  }
  // filter by selected group
  if ($gid) {
    $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date
      FROM {imagepicker} i, {imagepicker_group_images} g
      WHERE i.uid = %d AND i.img_id = g.img_id AND g.gid = %d
      ORDER BY i.$order";
    $result = pager_query($sql, $how_many, 0, NULL, array($user->uid, $gid));
  }
  else {
    $sql = "SELECT * FROM {imagepicker} WHERE uid=%d ORDER BY $order";
    $result = pager_query($sql, $how_many, 0, NULL, array($user->uid));
  }

  $content_main = _imagepicker_thumbs_display($result, FALSE, $src);
  if ( empty($content_main) ) {
    return '<div class="messages">'. t('You do not have any uploaded images') .'</div>';
  }

  $content_head = "";
  if (variable_get('imagepicker_show_browse_order_form', 1)) {
    $content_head .= drupal_get_form('imagepicker_browse_order_form', $user, ($src == 'admin' ? TRUE : FALSE));
  }
  if (_imagepicker_has_groups($user) && imagepicker_has_grouplist($user)) {
    // add groups select here
    $content_head .= drupal_get_form('imagepicker_browse_groups_form', ($account ? $user : FALSE));
  }
  if ($src == "account" || $src == "admin") {
    $content_head .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to view.') .'</div>';
  }
  else {
    $content_head .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to use.') .'</div>';
  }

  $content = $content_head . $content_main;
  return $content;
}

function _imagepicker_browse_public($src="iframe", $range=1) {
  global $user;

  $how_many = variable_get('imagepicker_advanced_browser_page', 25);
  $default_order = variable_get('imagepicker_default_browser_order', 'img_id DESC');
  $order = ($user->imagepicker_browser_order ? $user->imagepicker_browser_order : $default_order );

  if ($range == 1) {
    // Build sql for role restriction matching
    if (variable_get('imagepicker_publicroles_enabled', 1) &&  $src != 'admin') {
      $x=1;
      foreach ($user->roles as $role) {
        if ($x==1) $rolesql = "AND (u.avail_roles = 'all' OR u.avail_roles LIKE '%%". $role ."%%'";
        else $rolesql .= " OR u.avail_roles LIKE '%%". $role ."%%'";
        if ($x==count($user->roles)) $rolesql .= ")";
        $x++;
      }
    }
    $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
      FROM {imagepicker} i, {users} n, {imagepicker_user_groups} u, {imagepicker_group_images} g
      WHERE i.uid = n.uid
      AND u.public = 1
      $rolesql
      AND g.img_id = i.img_id
      AND u.gid = g.gid
      ORDER BY i.$order";
  }
  elseif ($range == 2) {
    $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
      FROM {imagepicker} i, {users} n, {imagepicker_user_groups} u, {imagepicker_group_images} g
      WHERE i.uid = n.uid
      AND u.public = 0
      AND g.img_id = i.img_id
      AND u.gid = g.gid
      ORDER BY i.$order";
  }
  else {
    $sql = "SELECT DISTINCT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
      FROM {imagepicker} i, {users} n
      WHERE i.uid = n.uid
      ORDER BY i.$order";
  }
  $result = pager_query($sql, $how_many, 0, NULL);

  $content_main = _imagepicker_thumbs_display($result, TRUE, $src);
  if (empty($content_main) ) {
    return '<div class="messages">'. t('There are no public images') .'</div>';
  }

  $content_head = "";
  if (variable_get('imagepicker_show_browse_order_form', 1)) {
    $content_head .= drupal_get_form('imagepicker_browse_order_form');
  }

  if ( $src == 'admin' ) {
    $content_head .= drupal_get_form('imagepicker_browse_public_form');
  }

  if ($src == "account" || $src == 'admin') {
    $content_head .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to view.') .'</div>';
  }
  else {
    $content_head .= '<div class="imgp_help">'. t('Hold the mouse over an image to view Name, Title and Description, Click on it to use.') .'</div>';
  }

  $content = $content_head . $content_main;
  return $content;
}

function _imagepicker_thumbs_display($result, $public = FALSE, $src = 'account') {

  global $user;
  $how_many = variable_get('imagepicker_advanced_browser_page', 25);
  $browsercols = variable_get('imagepicker_advanced_browser_columns', 0);
  $ct = 0;
  $imgct = 0;
  if ($result) {
    $content = '<div class="clear-block">';
    while ($img = db_fetch_array($result)) {
      if ($public || $src == 'admin') {
        $userdir = array('name' => $img['name'], 'uid' => $img['uid']);
      }
      else {
        $userdir = array( 'uid' => $user->uid, 'name' => $user->name);
      }
      // img_id img_name 	img_title 	img_description
      $imgpath = imagepicker_get_image_path($img, 'browser', $userdir);
      if ($imgpath) {
        if ($public) {
          // paths
          if ($src == 'account') {
            $imgurl = 'user/'. $user->uid .'/imagepicker/images/browse_public/';
          }
          elseif ($src == 'admin') {
            $imgurl = 'admin/settings/imagepicker/images/user/'. $img['uid'] .'/browse/';
          }
          else {
            $imgurl = 'imagepicker/browse_public/';
          }
        }
        else {
          // paths
          if ($src == 'account') {
            $imgurl = 'user/'. $user->uid .'/imagepicker/images/browse/';
          }
          elseif ($src == 'admin') {
            $imgurl = 'admin/settings/imagepicker/images/user/'. $img['uid'] .'/browse/';
          }
          else {
            $imgurl = 'imagepicker/browse/';
          }
        }

        $tooltip =  $img['img_name'] .': '. $img['img_title'] .' '. $img['img_description'];
        $imglink = ('<img src="'. $imgpath .'" alt="'. $img['img_title'] .'" title="'. $tooltip .'" />');
        $content .= '<div class="imgp_holder">';
        $content .= l($imglink, $imgurl . $img['img_id'], array('html' => TRUE));
        $content .= '</div>';
        $ct++;
        if ($browsercols > 0 && $ct >= $browsercols) {
          $content .= '</div><div class="clear-block">';
          $ct = 0;
        }
        $imgct++;
      }
    }
  }
  if (! $imgct) {
    return;
  }
  $content .= '</div>';
  $content .= theme('pager', NULL, $how_many);
  return $content;
}

function _imagepicker_browse_admin($src = "iframe", $account = FALSE, $public = FALSE, $range = 1) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $content = "";
  // paths
  if ($src == 'iframe') {
    $editpath   = "imagepicker/edit/";
    $deletepath = "imagepicker/delete/";
    $imgpath    = 'imagepicker/browse/';
  }
  elseif ($src == 'admin') {
    $editpath   = 'admin/settings/imagepicker/images/user/'. $user->uid .'/edit/';
    $deletepath = 'admin/settings/imagepicker/images/user/'. $user->uid .'/delete/';
    $imgpath    = 'admin/settings/imagepicker/images/user/'. $user->uid .'/browse/';
  }
  else {
    $editpath   = 'user/'. $user->uid .'/imagepicker/images/edit/';
    $deletepath = 'user/'. $user->uid .'/imagepicker/images/delete/';
    $imgpath    = 'user/'. $user->uid .'/imagepicker/images/browse/';
  }
  // if there are groups
  $gid = 0;
  if (! $public) {
    if (_imagepicker_has_groups( ($src == 'admin' ? $user : FALSE) ) && imagepicker_has_grouplist(($src == 'admin' ? $user : FALSE))) {
      // add groups select here
      $content .= drupal_get_form('imagepicker_browse_groups_form', ($src == 'admin' ? $user : FALSE));
      $gids = imagepicker_get_user_group_state(1, ($src == 'admin' ? $user : FALSE));
      $gid = $gids[0];
      if ($account) {
        $gid = variable_get('imagepicker_currentgroup', 0);
      }
    }
  }

  $how_many = variable_get('imagepicker_advanced_browser_page', 25);
  // tablesort
  if ($public && $src == 'admin') {
    $header = array(
      array('data' => t('Name'), 'field' => 'i.img_name'),
      array('data' => t('Title'), 'field' => 'i.img_title'),
      t('Description'),
      array('data' => t('User'), 'field' => 'n.name'),
      array('data' => t('Date'), 'field' => 'i.img_date'),
      array('data' => t('Actions'), 'colspan' => 2),
    );
  }
  else {
    $header = array(
      array('data' => t('Name'), 'field' => 'i.img_name'),
      array('data' => t('Title'), 'field' => 'i.img_title'),
      t('Description'),
      array('data' => t('Date'), 'field' => 'i.img_date'),
      array('data' => t('Actions'), 'colspan' => 2),
    );
  }

  if ($public && $src == 'admin') {
    if ($range == 1) {
      $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
        FROM {imagepicker} i, {users} n, {imagepicker_user_groups} u, {imagepicker_group_images} g
        WHERE i.uid = n.uid
        AND u.public = 1
        AND g.img_id = i.img_id
        AND u.gid = g.gid". tablesort_sql($header);
    }
    elseif ($range == 2) {
      $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
        FROM {imagepicker} i, {users} n, {imagepicker_user_groups} u, {imagepicker_group_images} g
        WHERE i.uid = n.uid
        AND u.public = 0
        AND g.img_id = i.img_id
        AND u.gid = g.gid". tablesort_sql($header);
    }
    else {
      $sql = "SELECT DISTINCT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date, n.name
        FROM {imagepicker} i, {users} n
        WHERE i.uid = n.uid". tablesort_sql($header);
    }
    $result = pager_query($sql, $how_many, 0, NULL);
  }
  else {
    // filter by selected group
    if ($gid) {
      $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date
        FROM {imagepicker} i, {imagepicker_group_images} g
        WHERE i.uid = %d AND i.img_id = g.img_id AND g.gid = %d". tablesort_sql($header);
      $result = pager_query($sql, $how_many, 0, NULL, array($user->uid, $gid));
    }
    else {
      $sql = "SELECT i.img_id, i.uid, i.img_name, i.img_title, i.img_description, i.img_date
        FROM {imagepicker} i
        WHERE i.uid=%d". tablesort_sql($header);
      $result = pager_query($sql, $how_many, 0, NULL, array($user->uid) );
    }
  }

  $rows = array();
  while ($row = db_fetch_array($result)) {
    // img_id img_name 	img_title 	img_description
    $img_name = check_plain($row['img_name']);
    $description = check_plain($row['img_description']);
    if ( drupal_strlen($description) > 30 ) {
      $description = drupal_substr($description, 0, 30) .'...';
    }

    if ($public && $src == 'admin') {
      $editpath   = 'admin/settings/imagepicker/images/user/'. $row['uid'] .'/edit/';
      $deletepath = 'admin/settings/imagepicker/images/user/'. $row['uid'] .'/delete/';
      $imgpath    = 'admin/settings/imagepicker/images/user/'. $row['uid'] .'/browse/';
      $listpath   = 'admin/settings/imagepicker/images/user/'. $row['uid'] .'/browseadmin';
      $row_data = array(
        l($img_name, $imgpath . $row['img_id']),
        check_plain($row['img_title']),
        $description,
        l($row['name'], $listpath),
        check_plain($row['img_date']),
        l(t('Edit'), $editpath . $row['img_id']),
        l(t('Delete'), $deletepath . $row['img_id']),
      );
    }
    else {
      $row_data = array(
        l($img_name, $imgpath . $row['img_id']),
        check_plain($row['img_title']),
        $description,
        check_plain($row['img_date']),
        l(t('Edit'), $editpath . $row['img_id']),
        l(t('Delete'), $deletepath . $row['img_id']),
      );
    }

    $rows[] = $row_data;
  }

  if (count($rows)) {
    if ($public && $src == 'admin') {
      $content .= drupal_get_form('imagepicker_browse_public_form');
    }
    $content .= '<div class="imgp_imgs_list">';
    $content .= theme('table', $header, $rows) . theme('pager', NULL, $how_many);
    $content .= '</div>';
  }
  else {
    $content = '<div class="messages">'. t('You do not have any uploaded images') .'</div>';
  }
  return $content;
}

function _imagepicker_user_has_img($account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $num = 0;
  $result = db_query("SELECT count(img_id) AS ct FROM {imagepicker} WHERE uid = '%d'", array($user->uid));
  $row = db_fetch_array($result);
  return $row['ct'];
}

/**
 * groups
 */
function _imagepicker_user_has_groups($public = 'all', $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  if ($public == 'yes') {
    $subsql = "AND public = 1";
  }
  elseif ($public == 'no') {
    $subsql = "AND public = 0";
  }
  else {
    $subsql ="";
  }
  $result = db_query("SELECT count(gid) AS ct FROM {imagepicker_user_groups}
    WHERE  uid = %d $subsql ", array($user->uid));
  $row = db_fetch_array($result);
  return $row['ct'];

}

function _imagepicker_user_has_grouped_img($public = 'all', $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  if ($public == 'yes') {
    $subsql = "AND public = 1";
  }
  elseif ($public == 'no') {
    $subsql = "AND public = 0";
  }
  else {
    $subsql ="";
  }

  $result = db_query("SELECT count(DISTINCT i.img_id) AS ct FROM {imagepicker_group_images} i, {imagepicker_user_groups} g
    WHERE g.uid = %d AND g.gid = i.gid $subsql ", array($user->uid));
  $row = db_fetch_array($result);
  return $row['ct'];
}

function imagepicker_has_groups($account=FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  $result = db_query("SELECT count(gid) as gidct FROM {imagepicker_user_groups} WHERE uid = %d", array($user->uid));
  $row = db_fetch_array($result);
  return $row['gidct'];
}

// get all the groups for the current user;
function imagepicker_get_groups($account=FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  $result = db_query("SELECT * FROM {imagepicker_user_groups} WHERE uid = %d", array($user->uid));
  $count = 0;
  while ($row = db_fetch_array($result)) {
    $data[$row['gid']] = $row['group_name'] . ($row['public'] ? ' - '. t('Public') : ' - '. t('Private'));
    $count++;
  }
  if ($count) {
    return $data;
  }
  return FALSE;
}

function imagepicker_get_user_group($gid, $obj=TRUE) {
  $result = db_query("SELECT * FROM {imagepicker_user_groups} WHERE gid = %d", array($gid));
  if ($obj) {
    return db_fetch_object($result);
  }
  return db_fetch_array($result);
}

// get get the gid of the selected group
function imagepicker_get_user_group_state($state=1, $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $result = db_query("SELECT gid FROM {imagepicker_user_groups} WHERE state=%d AND uid=%d", array($state, $user->uid));
  $ct = 0;
  while ($row = db_fetch_array($result)) {
    $data[] = $row['gid'];
    $ct++;
  }
  if ($ct) {
    return $data;
  }
  return FALSE;
}

function imagepicker_set_user_group_state($state, $gid, $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  db_query("UPDATE {imagepicker_user_groups} SET state=0 WHERE uid=%d AND state=1", array($user->uid));
  db_query("UPDATE {imagepicker_user_groups} SET state=%d WHERE gid=%d", array($state, $gid));
}

// for dropdown
function imagepicker_get_grouplist($account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $grouplist = array('0' => 'All');
  $result = db_query("
  SELECT DISTINCT g.gid, g.group_name, g.public
  FROM {imagepicker_user_groups} g, {imagepicker_group_images} i
  WHERE g.uid=%d AND g.gid = i.gid", array($user->uid));
  while ($row = db_fetch_array($result)) {
    $grouplist[$row['gid']] = $row['group_name'] . (user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1) ? ($row['public'] ? ' - '. t('Public') : ' - '. t('Private')) : '');
  }
  return $grouplist;
}
// for dropdown
function imagepicker_has_grouplist($account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $ct = 0;
  $result = db_query("
  SELECT DISTINCT g.gid
  FROM {imagepicker_user_groups} g, {imagepicker_group_images} i
  WHERE g.uid=%d AND g.gid = i.gid", array($user->uid));
  while ($row = db_fetch_array($result)) {
    $ct++;
  }
  return $ct;
}

function _imagepicker_has_groups($account=FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  $result = db_query("SELECT COUNT(gid) AS ct FROM {imagepicker_user_groups} WHERE uid = %d", array($user->uid));
  $row = db_fetch_array($result);
  return $row['ct'];
}

// get enabled groups that have images. usually just one
function imagepicker_get_enabled_group($account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $result = db_query("
  SELECT DISTINCT g.gid, g.group_name
  FROM {imagepicker_user_groups} g, {imagepicker_group_images} i
  WHERE g.uid=%d AND g.gid = i.gid AND g.state=1", array($user->uid));
  $ct = 0;
  while ($row = db_fetch_array($result)) {
    $data[] = $row['gid'];
    $ct++;
  }
  if ($ct) {
    return $data;
  }
  return FALSE;
}

function imagepicker_browse_groups_form(&$form_state, $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  // all the groups for the current user which have images attached
  $grouplist = imagepicker_get_grouplist($user);
  if ($account) {
    $enabledlist = variable_get('imagepicker_currentgroup', 0);
  }
  else {
    $enabledlist = imagepicker_get_enabled_group($user);
  }

  $form['gid'] = array(
    '#type' => 'select',
    '#default_value' => $enabledlist,
    '#options' => $grouplist,
    '#title' => t('Group'),
    '#prefix' => '<div id="imgp_groups_form" class="container-inline">',
  );
  if ($account) {
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $user->uid,
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Submit browse groups form
 */
function imagepicker_browse_groups_form_submit($form, &$form_state) {
  // need to get the users gids
  $user = FALSE;
  if ( $form_state['values']['uid'] ) {
    $user = user_load(array('uid' => $form_state['values']['uid']));
    if ($form_state['values']['gid']) {
    variable_set('imagepicker_currentgroup', $form_state['values']['gid']);
    }
    else {
    variable_set('imagepicker_currentgroup', 0);
    }
  }
  else {
    $gids = imagepicker_get_groups($user);
    $gids = array_keys($gids);
    foreach ($gids AS $gid) {
      $state = 0;
      if ( $gid == $form_state['values']['gid'] ) {
        $state = 1;
      }
      db_query("UPDATE {imagepicker_user_groups} SET state=%d WHERE gid=%d", array($state, $gid));
    }
  }
}

/**
 * insert a form into the edit image page to allow the image to be associated with a group
 */
function imagepicker_group_images_form(&$form_state, $img_id, $account = FALSE) {

  $grouplist = imagepicker_get_groups($account);
  $enabledlist = imagepicker_get_image_groups($img_id);

  $form['group_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Groups'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['group_images']['grouplist'] = array(
    '#type' => 'checkboxes',
    '#default_value' => $enabledlist,
    '#options' => $grouplist,
    '#title' => t('Your Groups'),
  );
  $form['group_images']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save group settings'),
    );
  $form['img_id'] = array(
    '#type' => 'hidden',
    '#value' => $img_id,
  );
  return $form;
}

/**
 * Submit group images form
 */
function imagepicker_group_images_form_submit($form, &$form_state) {
  // have to delete all the entries for this image and rebuild with the new ones;
  $img_id = $form_state['values']['img_id'];
  imagepicker_delete_group_image($img_id);
  $grouplist = $form_state['values']['grouplist'];
  $inserted = FALSE;
  foreach ($grouplist AS $gid) {
    if ($gid > 0) {
      $record = array('gid' => $gid, 'img_id' => $img_id);
      imagepicker_insert_group_image($record);
      $inserted = TRUE;
    }
  }
  if (! $inserted) {
    $gid = imagepicker_get_user_group_state();
    if ($gid) {
      $ids = imagepicker_get_images_by_group($gid);
      if (! $ids) {
        global $user;
        db_query("UPDATE {imagepicker_user_groups} SET state=0 WHERE uid=%d AND state=1", array($user->uid));
      }
    }
  }
}

function imagepicker_get_image_groups($img_id) {
  $data = array();
  $result = db_query("SELECT gid FROM {imagepicker_group_images} WHERE img_id = %d", array($img_id));
  while ($row = db_fetch_array($result)) {
    $data[] = $row['gid'];
  }
  return $data;
}

function imagepicker_get_images_by_group($gid) {
  $result = db_query("SELECT img_id FROM {imagepicker_group_images} WHERE gid = %d", array($gid));
  $ct = 0;
  while ($row = db_fetch_array($result)) {
    $data[] = $row['img_id'];
    $ct++;
  }
  if ($ct) {
    return $data;
  }
  return FALSE;
}

function imagepicker_delete_group_image($img_id) {
  if (! db_query("DELETE FROM {imagepicker_group_images} WHERE img_id=%d", array($img_id))) {
    drupal_set_message(t('Error while trying to delete your group.'), 'error');
  }
}

function imagepicker_insert_group_image($record) {
  if ($record['gid'] && $record['img_id']) {
    if (! db_query(
      "INSERT INTO {imagepicker_group_images} (gid, img_id) VALUES (%d, %d)",
      array($record['gid'], $record['img_id']))) {
      drupal_set_message(t('Error while trying to insert your group.'), 'error');
    }
  }
}

// roles
 /**
+ * Helper function to check if a user has a specific role
+ */
function imagepicker_user_has_role($role, $user=NULL) {
  if ($user == NULL) {
    global $user;
  }

  if (is_array($user->roles) && in_array($role, array_values($user->roles))) {
    return TRUE;
  }

  return FALSE;
}

// browse order
function imagepicker_browse_order_form(&$form_state, $account = FALSE, $admin = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }

  $default_order = variable_get('imagepicker_default_browser_order', 'img_id DESC');
  if ($admin) {
    $order = variable_get('imagepicker_browser_order', $default_order);
    $form['admin'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
    );
  }
  else {
    $order = ($user->imagepicker_browser_order ? $user->imagepicker_browser_order : $default_order );
  }
  $orderlist = array(
    'img_id DESC' => t('Newest first'),
    'img_id ASC' => t('Newest last'),
    'img_date DESC' => t('Edited first'),
    'img_date ASC' => t('Edited last'),
    'img_name' => t('By name'),
  );
  $default_order = variable_get('imagepicker_default_browser_order', 'img_id DESC');
  $form['imagepicker_browser_order'] = array(
    '#type' => 'select',
    '#default_value' => $order,
    '#options' => $orderlist,
    '#title' => t('Order'),
    '#prefix' => '<div id="imgp_order_form" class="container-inline">',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Submit form
 */
function imagepicker_browse_order_form_submit($form, &$form_state) {
  global $user;
  if ($form_state['values']['admin']) {
    variable_set('imagepicker_browser_order', $form_state['values']['imagepicker_browser_order']);
  }
  else {
    user_save($user, array('imagepicker_browser_order' => $form_state['values']['imagepicker_browser_order']));
  }
}

function imagepicker_get_files_directory() {
  $drupaldir = str_replace('/', DIRECTORY_SEPARATOR, getcwd()) . DIRECTORY_SEPARATOR;
  $dir = $drupaldir . file_directory_path() . DIRECTORY_SEPARATOR . IMAGEPICKER_FILES_DIR;
  return $dir;
}

function _imagepicker_get_img($img_id, $checkuser=TRUE, $account = FALSE) {
  if (is_object($account)) {
    $user = $account;
  }
  else {
    global $user;
  }

  $result = db_query_range("SELECT * FROM {imagepicker} WHERE img_id = '%d'", $img_id, 0, 1);
    $img = db_fetch_array($result);
    if ( count($img) ) {
      if (($img['uid'] != $user->uid) && $checkuser) {
        drupal_set_message(t('This image does not belong to you.'), 'error');
        watchdog('imagepicker', 'User uid %d attempted to edit image belonging to user uid %d', array($user->uid, $img['uid']), WATCHDOG_WARNING);
        return FALSE;
      }
      return $img;
    }
  return FALSE;
}

/**
 * statistics
 */
function imagepicker_group_stats($account = FALSE) {
  // stats
  $usercount = FALSE;
  $bytecount = 0;
  if ($account) {
    if ($account == -1) {
      $allcount = _imagepicker_user_has_img();
      $totcount = _imagepicker_user_has_grouped_img('all');
      $publiccount = _imagepicker_user_has_grouped_img('yes');
      $nopubliccount = _imagepicker_user_has_grouped_img('no');
      $groupcount = _imagepicker_user_has_groups('all');
      $publicgroupcount = _imagepicker_user_has_groups('yes');
      $nopublicgroupcount = _imagepicker_user_has_groups('no');
      $bytecount = imagepicker_get_all_bytes(-1);
    }
    else {
      $allcount = _imagepicker_user_has_img($account);
      $totcount = _imagepicker_user_has_grouped_img('all', $account);
      $publiccount = _imagepicker_user_has_grouped_img('yes', $account);
      $nopubliccount = _imagepicker_user_has_grouped_img('no', $account);
      $groupcount = _imagepicker_user_has_groups('all', $account);
      $publicgroupcount = _imagepicker_user_has_groups('yes', $account);
      $nopublicgroupcount = _imagepicker_user_has_groups('no', $account);
      $bytecount = imagepicker_get_all_bytes($account);
    }
  }
  else {
    // imagepicker users
    $result = db_query("SELECT count(DISTINCT uid) AS ct FROM {imagepicker_user_groups}");
    $row = db_fetch_array($result);
    $usercount = $row['ct'];
    // all groups
    $result = db_query("SELECT count(gid) AS ct FROM {imagepicker_user_groups}");
    $row = db_fetch_array($result);
    $groupcount = $row['ct'];
    // public groups
    $result = db_query("SELECT count(gid) AS ct FROM {imagepicker_user_groups} WHERE public = 1");
    $row = db_fetch_array($result);
    $publicgroupcount = $row['ct'];
    // private groups
    $result = db_query("SELECT count(gid) AS ct FROM {imagepicker_user_groups} WHERE public = 0");
    $row = db_fetch_array($result);
    $nopublicgroupcount = $row['ct'];
    // all images
    $result = db_query("SELECT count(img_id) AS ct FROM {imagepicker}");
    $row = db_fetch_array($result);
    $allcount = $row['ct'];
    // grouped images
    $result = db_query("SELECT count(DISTINCT gi.img_id) AS ct FROM {imagepicker_group_images} gi, {imagepicker_user_groups} g WHERE g.gid = gi.gid ");
    $row = db_fetch_array($result);
    $totcount = $row['ct'];
    // public images
    $result = db_query("SELECT COUNT(i.img_id) AS ct FROM {imagepicker} i, {imagepicker_user_groups} g, {imagepicker_group_images} gi WHERE i.img_id = gi.img_id AND g.gid = gi.gid AND g.public = 1");
    $row = db_fetch_array($result);
    $publiccount = $row['ct'];
    // private images
    $result = db_query("SELECT COUNT(i.img_id) AS ct FROM {imagepicker} i, {imagepicker_user_groups} g, {imagepicker_group_images} gi WHERE i.img_id = gi.img_id AND g.gid = gi.gid AND g.public = 0");
    $row = db_fetch_array($result);
    $nopubliccount = $row['ct'];

    $bytecount = imagepicker_get_all_bytes();
  }
  $bytecount = _imagepicker_bkmg($bytecount);

  $headers = array(
    array('data' =>  t('Group statistics'), 'colspan' => 2),
    array('data' =>  t('Image statistics'), 'colspan' => 2),
  );

  if ( user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1) ) {
    $rows = array(
      array(t('Groups') .": ", $groupcount,                 t('Images') .": ", $allcount),
      array(t('Public groups') .": ", $publicgroupcount,    t('Public images') .": ", $publiccount),
      array(t('Private groups') .": ", $nopublicgroupcount, t('Private images') .": ", $nopubliccount),
      array( '', '',                                        t('Grouped images') .": ", $totcount),
      array( '', '',                                        t('Ungrouped images') .": ", $allcount-$totcount),
      array(($usercount ? t('Users') .": " : ''), ($usercount ? $usercount : ''), t('Space used')  .": ", $bytecount),
    );

  }
  else {
    $rows = array(
      array(t('Groups') .": ", $groupcount, t('Images') .": ", $allcount),
      array( '', '',                        t('Grouped images') .": ", $totcount),
      array( '', '',                        t('Ungrouped images') .": ", $allcount-$totcount),
      array(($usercount ? t('Users') .": " : ''), ($usercount ? $usercount : ''), t('Space used')  .": ", $bytecount),
    );
  }

  $content .= '<div class="imgp_groups_info">'. theme('table', $headers, $rows) .'</div>';
  return $content;

}

// build a table
function imagepicker_groups_list($src=FALSE, $account=FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  if ($src) {
    if ($src == 'admin') {
      $editpath = 'admin/settings/imagepicker/groups/user/'. $user->uid .'/edit/';
      $deletepath = 'admin/settings/imagepicker/groups/user/'. $user->uid .'/delete/';
      $browsepath = 'admin/settings/imagepicker/groups/user/'. $user->uid .'/browse/';
    }
    else {
      $editpath = 'user/'. $user->uid .'/imagepicker/groups/edit/';
      $deletepath = 'user/'. $user->uid .'/imagepicker/groups/delete/';
      $browsepath = 'user/'. $user->uid .'/imagepicker/groups/browse/';
    }
  }
  else {
    $editpath = "imagepicker/groups/edit/";
    $deletepath = "imagepicker/groups/delete/";
    $browsepath = 'imagepicker/groups/';
  }

  $content = "";
  $how_many = variable_get('imagepicker_rows_per_page', 25);

  if (user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1)) {
    $header = array(
      array('data' => t('Group name'), 'field' => 'g.group_name'),
      array('data' => t('Description'), 'field' => 'g.group_description'),
      array('data' => t('No. images'), 'field' => 'ct'),
      t('State'),
      array('data' => t('Public'), 'field' => 'g.public'),
      array('data' => t('Actions'), 'colspan' => 2),
    );
  }
  else {
    $header = array(
      array('data' => t('Group name'), 'field' => 'g.group_name'),
      array('data' => t('Description'), 'field' => 'g.group_description'),
      array('data' => t('No. images'), 'field' => 'ct'),
      t('State'),
      array('data' => t('Actions'), 'colspan' => 2),
    );
  }

  $sql = "SELECT g.gid, g.group_name, g.group_description, g.public, COUNT(i.img_id) AS ct
    FROM {imagepicker_user_groups} g LEFT JOIN {imagepicker_group_images} i USING(gid)
    WHERE  uid=%d
    GROUP BY g.gid". tablesort_sql($header);

  $result = pager_query($sql, $how_many, 0, NULL, array($user->uid));
  $rows = array();
  $totcount = 0;
  $rowcount = 0;
  $enabledlist = imagepicker_get_enabled_group($account);
  while ($row = db_fetch_array($result)) {
    if (user_access('use public imagepicker') && variable_get('imagepicker_public_enabled', 1)) {
      $row_data = array(
        check_plain($row['group_name']),
        check_plain($row['group_description']),
        ($row['ct'] && $browsepath ?  l($row['ct'], $browsepath . $row['gid']) : $row['ct']),
        (($enabledlist && in_array($row['gid'], $enabledlist)) ? t('selected') : ''),
        ($row['public'] ? t('Yes') : t('No')),
        l(t('Edit'), $editpath . $row['gid']),
        l(t('Delete'), $deletepath . $row['gid']),
      );
    }
    else {
      $row_data = array(
        check_plain($row['group_name']),
        check_plain($row['group_description']),
        ($row['ct'] && $browsepath ?  l($row['ct'], $browsepath . $row['gid']) : $row['ct']),
        (($enabledlist && in_array($row['gid'], $enabledlist)) ? t('selected') : ''),
        l(t('Edit'), $editpath . $row['gid']),
        l(t('Delete'), $deletepath . $row['gid']),
      );
    }
    $rows[] = $row_data;
    $rowcount++;
  }

  if (count($rows)) {
    $content .= '<div class="imgp_groups_list">'. theme('table', $header, $rows) . theme('pager', NULL, $how_many) ."</div>";
    return $content;
  }
  else {
    return '<div class="messages">'. t('No groups found.') .'</div>';
  }
}

function imagepicker_get_group_images_count($gid) {
  $result = db_query("SELECT count(gid) as gidct FROM {imagepicker_group_images} WHERE gid = %d", array($gid));
  $row = db_fetch_array($result);
  return $row['gidct'];

}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing users
 */
function imagepicker_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT u.name FROM {users} u, {imagepicker} i WHERE LOWER(u.name) LIKE LOWER('%s%%') AND u.uid=i.uid", $string, 0, 10);
    while ($user = db_fetch_object($result)) {
      $matches[$user->name] = check_plain($user->name);
    }
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions for existing groups
 */
function imagepicker_group_search_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT group_name FROM {imagepicker_user_groups} WHERE LOWER(group_name) LIKE LOWER('%s%%')", $string, 0, 10);
    while ($group = db_fetch_object($result)) {
      $matches[$group->group_name] = check_plain($group->group_name);
    }
  }
  print drupal_to_js($matches);
  exit();
}

function imagepicker_browse_public_form(&$form_state) {
  $list = array(
    0 => t('All'),
    1 => t('Public'),
    2 => t('Private'),
  );
  $form['imagepicker_browse_public'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('imagepicker_browse_public', 1),
    '#options' => $list,
    '#title' => t('Show'),
    '#prefix' => '<div id="imgp_browse_form" class="container-inline">',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  );
  return $form;
}

function imagepicker_browse_public_form_submit($form, &$form_state) {
  variable_set('imagepicker_browse_public', $form_state['values']['imagepicker_browse_public']);
}

function _imagepicker_view_content($img, $imgpath, $info) {
  return '<div id="imgp_img_view">'.
    ($img['img_title'] ? '<div id="imgp_img_view_title">'. $img['img_title'] .'</div>' : '') .
    '<img id="imgp_img_view_img" src="'. $imgpath .'" alt="'. $img['img_title'] .'" title="'. $img['img_name'] .'" />'.
    ($img['img_description'] ? '<div id="imgp_img_view_desc">'. nl2br($img['img_description']) .'</div>' : '') .
    '<div>'.
    t('Width')  .": ". $info['width'] ."&nbsp;&nbsp;&nbsp;".
    t('Height') .": ". $info['height'] ."&nbsp;&nbsp;&nbsp;".
    t('Type')   .": ". $info['extension'] ."&nbsp;&nbsp;&nbsp;".
    t('Size')   .": ". $info['file_size'] .
    '</div></div>';
}

function _imagepicker_get_bytes($img_id, $account = FALSE) {
  if ($account) {
    $user = $account;
    $userdir = array('name' => $user->name , 'uid' => $user->uid);
  }
  else {
    global $user;
    $userdir = FALSE;
  }

  $tot = 0;
  $img = _imagepicker_get_img($img_id, FALSE, $user);
  if ($img) {
    $path = imagepicker_get_path(FALSE, $userdir);
    $fullinfo = image_get_info($path . $img['img_name']);
    $thumbsinfo = image_get_info($path . IMAGEPICKER_THUMBS_DIR .'/'. $img['img_name']);
    $browserinfo = image_get_info($path . IMAGEPICKER_BROWSER_DIR .'/'. $img['img_name']);
    $tot = $fullinfo['file_size'] + $thumbsinfo['file_size'] + $browserinfo['file_size'];
  }
  else {
    drupal_set_message(t('Image not found.'), 'error');
  }
  return $tot;
}

function imagepicker_get_all_bytes($account = FALSE) {
  $tot = 0;
  $olduid = 0;
  $sql = 'SELECT img_id, uid FROM {imagepicker} ';
  if (is_object($account) ) {
    $sql .= 'WHERE uid = '. $account->uid;
    $user = $account;
  }
  elseif ($account == -1) {
    global $user;
    $sql .= 'WHERE uid = '. $user->uid;
  }
  $result = db_query($sql);
  while ( $row = db_fetch_array($result) ) {
    if (! $account && $olduid <> $row['uid'] ) {
      $user = user_load(array('uid' => $row['uid']));
    }
    $tot += _imagepicker_get_bytes($row['img_id'], $user);
    $olduid = $row['uid'];
  }
  return $tot;
}

function _imagepicker_bkmg($number) {
  $inc = 1000;
  $count = 1000;
  $symarr = array('K', 'M', 'G', 'T');
  $sym = 'B';
  while ($number > $count) {
    $count = $count * $inc;
    $sym = array_shift($symarr);

  }
  if ($number < $inc ) {
    return ($number .' '. $sym);
  }
  return (round(($number/$count)*$inc, 2) .' '. $sym);
}

/**
 * quotas
 *
 */
function imagepicker_quota_form(&$form_state, $account=FALSE) {

  $list = imagepicker_get_quota_list();
  $default = variable_get('imagepicker_quota_default', 0);
  $quota = $default;
  $title = t('Set default quota');
  if ($account) {
    $title = t('Set user quota');
    $quota = $account->imagepicker_quota;
    if (! $quota) {
      $quota = $default;
    }
  }

  $form['imagepicker_quota'] = array(
    '#type' => 'select',
    '#default_value' => $quota,
    '#options' => $list,
    '#title' => $title,
  );
  $form['account'] = array(
    '#type' => 'hidden',
    '#value' => ($account ? $account->uid : 0),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  return $form;

}

function imagepicker_quota_form_submit($form, &$form_state) {

    if ( $form_state['values']['account'] > 0 ) {
      $user = user_load(array('uid' => $form_state['values']['account']));
      user_save($user, array('imagepicker_quota' => $form_state['values']['imagepicker_quota']));
    }
    else {
      variable_set('imagepicker_quota_default', $form_state['values']['imagepicker_quota']);
    }
}

function imagepicker_get_quota_list($key = 'x') {
  $list = array(
    0 => t('Unlimited'),
    1 => t('1 Meg'),
    5 => t('5 Meg'),
    10 => t('10 Meg'),
    25 => t('25 Meg'),
    50 => t('50 Meg'),
    100 => t('100 Meg'),
    250 => t('250 Meg'),
    500 => t('500 Meg'),
    750 => t('750 Meg'),
    1000 => t('1 Gig'),
    2000 => t('2 Gig'),
    5000 => t('5 Gig'),
  );

  if ($key == 'x') {
    return $list;
  }

  $value = $list[$key-1];
  return $value;
}

function imagepicker_quota_ok($src, $account = FALSE) {
  if ($account) {
    $user = $account;
  }
  else {
    global $user;
  }
  $usedbytes = imagepicker_get_all_bytes($user)+1;
  $usedbytesprint = _imagepicker_bkmg($usedbytes);
  $quota = 0;
  $quota_enabled = variable_get('imagepicker_quota_enable', 1);
  if ($quota_enabled) {
    $quota = ( isset($user->imagepicker_quota) ? $user->imagepicker_quota : variable_get('imagepicker_quota_default', 1));
    if ($quota > 0) {
      $quota_ok = (( ($quota*1000000) >  $usedbytes) ? TRUE : FALSE );
    }
    else {
      $quota_ok = TRUE;
    }
  }
  else {
    $quota_ok = TRUE;
  }

  $imgtot = _imagepicker_user_has_img($user);
  if ($quota_enabled) {
    if ($quota > 0) {
      $pused = round($usedbytes / ($quota*1000000) * 100, 2);
      $quotaprint = imagepicker_get_quota_list($quota+1);
      if ($src == 'admin') {
        $content .= '<p class="messages">'. t('The quota for %name is %quotaprint and has used %pused percent, or %usedbytesprint in %imgtot images', array('%name' => $user->name, '%quotaprint' => $quotaprint, '%pused' => $pused, '%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
      }
      else {
        $content .= '<p class="messages">'. t('Your quota is %quotaprint and you have used %pused percent, or %usedbytesprint in %imgtot images', array('%quotaprint' => $quotaprint, '%pused' => $pused, '%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
      }
    }
    else {
      $quotaprint = imagepicker_get_quota_list($quota+1);
      if ($src == 'admin') {
        $content .= '<p class="messages">'. t('The quota for %name is %quotaprint and has used %usedbytesprint in %imgtot images', array('%name' => $user->name, '%quotaprint' => $quotaprint, '%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
      }
      else {
        $content .= '<p class="messages">'. t('Your quota is %quotaprint and you have used %usedbytesprint in %imgtot images', array('%quotaprint' => $quotaprint, '%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
      }
    }
  }
  else {
    if ($src == 'admin') {
      $content .= '<p class="messages">'. t('%name has used %usedbytesprint in %imgtot images', array('%name' => $user->name, '%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
    }
    else {
      $content .= '<p class="messages">'. t('You have used %usedbytesprint in %imgtot images', array('%usedbytesprint' => $usedbytesprint, '%imgtot' => $imgtot)) .'</p>';
    }
  }
  if ($quota_ok) {
    if ($account) {
      if ($src == 'admin') {
        $content .= drupal_get_form('imagepicker_upload_form', $user, TRUE);
      }
      elseif ($src == 'user') {
        $content .= drupal_get_form('imagepicker_upload_form', $user);
      }
    }
    else {
      $content .= drupal_get_form('imagepicker_upload_form');
    }
  }
  else {
    if ($account) {
      $content .= '<p class="messages">'. t('%name has used all of quota, please delete some files to make some room.', array('%name' => $user->name)) .'</p>';
    }
    else {
      $content .= '<p class="messages">'. t('You have used all of your quota, please delete some files to make some room.') .'</p>';
    }
  }

  return $content;
}
